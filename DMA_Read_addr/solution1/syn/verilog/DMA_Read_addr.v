// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="DMA_Read_addr,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=480011,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=958,HLS_SYN_LUT=1316}" *)

module DMA_Read_addr (
        ap_clk,
        ap_rst_n,
        m_axi_in_r_AWVALID,
        m_axi_in_r_AWREADY,
        m_axi_in_r_AWADDR,
        m_axi_in_r_AWID,
        m_axi_in_r_AWLEN,
        m_axi_in_r_AWSIZE,
        m_axi_in_r_AWBURST,
        m_axi_in_r_AWLOCK,
        m_axi_in_r_AWCACHE,
        m_axi_in_r_AWPROT,
        m_axi_in_r_AWQOS,
        m_axi_in_r_AWREGION,
        m_axi_in_r_AWUSER,
        m_axi_in_r_WVALID,
        m_axi_in_r_WREADY,
        m_axi_in_r_WDATA,
        m_axi_in_r_WSTRB,
        m_axi_in_r_WLAST,
        m_axi_in_r_WID,
        m_axi_in_r_WUSER,
        m_axi_in_r_ARVALID,
        m_axi_in_r_ARREADY,
        m_axi_in_r_ARADDR,
        m_axi_in_r_ARID,
        m_axi_in_r_ARLEN,
        m_axi_in_r_ARSIZE,
        m_axi_in_r_ARBURST,
        m_axi_in_r_ARLOCK,
        m_axi_in_r_ARCACHE,
        m_axi_in_r_ARPROT,
        m_axi_in_r_ARQOS,
        m_axi_in_r_ARREGION,
        m_axi_in_r_ARUSER,
        m_axi_in_r_RVALID,
        m_axi_in_r_RREADY,
        m_axi_in_r_RDATA,
        m_axi_in_r_RLAST,
        m_axi_in_r_RID,
        m_axi_in_r_RUSER,
        m_axi_in_r_RRESP,
        m_axi_in_r_BVALID,
        m_axi_in_r_BREADY,
        m_axi_in_r_BRESP,
        m_axi_in_r_BID,
        m_axi_in_r_BUSER,
        outs_TDATA,
        outs_TVALID,
        outs_TREADY,
        outs_TKEEP,
        outs_TSTRB,
        outs_TUSER,
        outs_TLAST,
        outs_TID,
        outs_TDEST,
        active_frame_V,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 11'b1;
parameter    ap_ST_fsm_state2 = 11'b10;
parameter    ap_ST_fsm_state3 = 11'b100;
parameter    ap_ST_fsm_state4 = 11'b1000;
parameter    ap_ST_fsm_state5 = 11'b10000;
parameter    ap_ST_fsm_state6 = 11'b100000;
parameter    ap_ST_fsm_state7 = 11'b1000000;
parameter    ap_ST_fsm_state8 = 11'b10000000;
parameter    ap_ST_fsm_state9 = 11'b100000000;
parameter    ap_ST_fsm_pp0_stage0 = 11'b1000000000;
parameter    ap_ST_fsm_state13 = 11'b10000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_IN_R_ID_WIDTH = 1;
parameter    C_M_AXI_IN_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_IN_R_DATA_WIDTH = 32;
parameter    C_M_AXI_IN_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_IN_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_IN_R_TARGET_ADDR = 0;
parameter    C_M_AXI_IN_R_USER_VALUE = 0;
parameter    C_M_AXI_IN_R_PROT_VALUE = 0;
parameter    C_M_AXI_IN_R_CACHE_VALUE = 3;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv19_0 = 19'b0000000000000000000;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv32_75300 = 32'b1110101001100000000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv19_75300 = 19'b1110101001100000000;
parameter    ap_const_lv19_1 = 19'b1;
parameter    ap_const_lv10_320 = 10'b1100100000;
parameter    ap_const_lv10_1 = 10'b1;
parameter    ap_const_lv10_31F = 10'b1100011111;
parameter    ap_const_lv32_A = 32'b1010;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_IN_R_WSTRB_WIDTH = (C_M_AXI_IN_R_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_WSTRB_WIDTH = (C_M_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_in_r_AWVALID;
input   m_axi_in_r_AWREADY;
output  [C_M_AXI_IN_R_ADDR_WIDTH - 1 : 0] m_axi_in_r_AWADDR;
output  [C_M_AXI_IN_R_ID_WIDTH - 1 : 0] m_axi_in_r_AWID;
output  [7:0] m_axi_in_r_AWLEN;
output  [2:0] m_axi_in_r_AWSIZE;
output  [1:0] m_axi_in_r_AWBURST;
output  [1:0] m_axi_in_r_AWLOCK;
output  [3:0] m_axi_in_r_AWCACHE;
output  [2:0] m_axi_in_r_AWPROT;
output  [3:0] m_axi_in_r_AWQOS;
output  [3:0] m_axi_in_r_AWREGION;
output  [C_M_AXI_IN_R_AWUSER_WIDTH - 1 : 0] m_axi_in_r_AWUSER;
output   m_axi_in_r_WVALID;
input   m_axi_in_r_WREADY;
output  [C_M_AXI_IN_R_DATA_WIDTH - 1 : 0] m_axi_in_r_WDATA;
output  [C_M_AXI_IN_R_WSTRB_WIDTH - 1 : 0] m_axi_in_r_WSTRB;
output   m_axi_in_r_WLAST;
output  [C_M_AXI_IN_R_ID_WIDTH - 1 : 0] m_axi_in_r_WID;
output  [C_M_AXI_IN_R_WUSER_WIDTH - 1 : 0] m_axi_in_r_WUSER;
output   m_axi_in_r_ARVALID;
input   m_axi_in_r_ARREADY;
output  [C_M_AXI_IN_R_ADDR_WIDTH - 1 : 0] m_axi_in_r_ARADDR;
output  [C_M_AXI_IN_R_ID_WIDTH - 1 : 0] m_axi_in_r_ARID;
output  [7:0] m_axi_in_r_ARLEN;
output  [2:0] m_axi_in_r_ARSIZE;
output  [1:0] m_axi_in_r_ARBURST;
output  [1:0] m_axi_in_r_ARLOCK;
output  [3:0] m_axi_in_r_ARCACHE;
output  [2:0] m_axi_in_r_ARPROT;
output  [3:0] m_axi_in_r_ARQOS;
output  [3:0] m_axi_in_r_ARREGION;
output  [C_M_AXI_IN_R_ARUSER_WIDTH - 1 : 0] m_axi_in_r_ARUSER;
input   m_axi_in_r_RVALID;
output   m_axi_in_r_RREADY;
input  [C_M_AXI_IN_R_DATA_WIDTH - 1 : 0] m_axi_in_r_RDATA;
input   m_axi_in_r_RLAST;
input  [C_M_AXI_IN_R_ID_WIDTH - 1 : 0] m_axi_in_r_RID;
input  [C_M_AXI_IN_R_RUSER_WIDTH - 1 : 0] m_axi_in_r_RUSER;
input  [1:0] m_axi_in_r_RRESP;
input   m_axi_in_r_BVALID;
output   m_axi_in_r_BREADY;
input  [1:0] m_axi_in_r_BRESP;
input  [C_M_AXI_IN_R_ID_WIDTH - 1 : 0] m_axi_in_r_BID;
input  [C_M_AXI_IN_R_BUSER_WIDTH - 1 : 0] m_axi_in_r_BUSER;
output  [31:0] outs_TDATA;
output   outs_TVALID;
input   outs_TREADY;
output  [3:0] outs_TKEEP;
output  [3:0] outs_TSTRB;
output  [0:0] outs_TUSER;
output  [0:0] outs_TLAST;
output  [0:0] outs_TID;
output  [0:0] outs_TDEST;
input  [1:0] active_frame_V;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    ap_ready;
reg   [31:0] outs_V_data_V_1_data_out;
reg    outs_V_data_V_1_vld_in;
wire    outs_V_data_V_1_vld_out;
wire    outs_V_data_V_1_ack_in;
wire    outs_V_data_V_1_ack_out;
reg   [31:0] outs_V_data_V_1_payload_A;
reg   [31:0] outs_V_data_V_1_payload_B;
reg    outs_V_data_V_1_sel_rd;
reg    outs_V_data_V_1_sel_wr;
wire    outs_V_data_V_1_sel;
wire    outs_V_data_V_1_load_A;
wire    outs_V_data_V_1_load_B;
reg   [1:0] outs_V_data_V_1_state;
wire    outs_V_data_V_1_state_cmp_full;
wire   [3:0] outs_V_keep_V_1_data_out;
reg    outs_V_keep_V_1_vld_in;
wire    outs_V_keep_V_1_vld_out;
wire    outs_V_keep_V_1_ack_in;
wire    outs_V_keep_V_1_ack_out;
reg    outs_V_keep_V_1_sel_rd;
wire    outs_V_keep_V_1_sel;
reg   [1:0] outs_V_keep_V_1_state;
wire   [3:0] outs_V_strb_V_1_data_out;
reg    outs_V_strb_V_1_vld_in;
wire    outs_V_strb_V_1_vld_out;
wire    outs_V_strb_V_1_ack_in;
wire    outs_V_strb_V_1_ack_out;
reg    outs_V_strb_V_1_sel_rd;
wire    outs_V_strb_V_1_sel;
reg   [1:0] outs_V_strb_V_1_state;
reg   [0:0] outs_V_user_V_1_data_out;
reg    outs_V_user_V_1_vld_in;
wire    outs_V_user_V_1_vld_out;
wire    outs_V_user_V_1_ack_in;
wire    outs_V_user_V_1_ack_out;
reg   [0:0] outs_V_user_V_1_payload_A;
reg   [0:0] outs_V_user_V_1_payload_B;
reg    outs_V_user_V_1_sel_rd;
reg    outs_V_user_V_1_sel_wr;
wire    outs_V_user_V_1_sel;
wire    outs_V_user_V_1_load_A;
wire    outs_V_user_V_1_load_B;
reg   [1:0] outs_V_user_V_1_state;
wire    outs_V_user_V_1_state_cmp_full;
reg   [0:0] outs_V_last_V_1_data_out;
reg    outs_V_last_V_1_vld_in;
wire    outs_V_last_V_1_vld_out;
wire    outs_V_last_V_1_ack_in;
wire    outs_V_last_V_1_ack_out;
reg   [0:0] outs_V_last_V_1_payload_A;
reg   [0:0] outs_V_last_V_1_payload_B;
reg    outs_V_last_V_1_sel_rd;
reg    outs_V_last_V_1_sel_wr;
wire    outs_V_last_V_1_sel;
wire    outs_V_last_V_1_load_A;
wire    outs_V_last_V_1_load_B;
reg   [1:0] outs_V_last_V_1_state;
wire    outs_V_last_V_1_state_cmp_full;
wire   [0:0] outs_V_id_V_1_data_out;
reg    outs_V_id_V_1_vld_in;
wire    outs_V_id_V_1_vld_out;
wire    outs_V_id_V_1_ack_in;
wire    outs_V_id_V_1_ack_out;
reg    outs_V_id_V_1_sel_rd;
wire    outs_V_id_V_1_sel;
reg   [1:0] outs_V_id_V_1_state;
wire   [0:0] outs_V_dest_V_1_data_out;
reg    outs_V_dest_V_1_vld_in;
wire    outs_V_dest_V_1_vld_out;
wire    outs_V_dest_V_1_ack_in;
wire    outs_V_dest_V_1_ack_out;
reg    outs_V_dest_V_1_sel_rd;
wire    outs_V_dest_V_1_sel;
reg   [1:0] outs_V_dest_V_1_state;
wire   [31:0] frame_buffer0;
wire   [31:0] frame_buffer1;
wire   [31:0] frame_buffer2;
reg   [1:0] active_frame_V_0_data_reg;
reg    active_frame_V_0_vld_reg;
reg    active_frame_V_0_ack_out;
wire   [0:0] mode_V;
reg   [31:0] n;
reg    in_r_blk_n_AR;
wire   [0:0] ap_CS_fsm_state3;
reg    in_r_blk_n_R;
wire   [0:0] ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] exitcond_flatten_reg_426;
reg    outs_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426;
wire    in_r_AWREADY;
wire    in_r_WREADY;
reg    in_r_ARVALID;
wire    in_r_ARREADY;
wire    in_r_RVALID;
reg    in_r_RREADY;
wire   [31:0] in_r_RDATA;
wire    in_r_RLAST;
wire   [0:0] in_r_RID;
wire   [0:0] in_r_RUSER;
wire   [1:0] in_r_RRESP;
wire    in_r_BVALID;
wire   [1:0] in_r_BRESP;
wire   [0:0] in_r_BID;
wire   [0:0] in_r_BUSER;
reg   [18:0] indvar_flatten_reg_180;
reg   [9:0] y_reg_191;
reg   [9:0] x_reg_202;
wire   [31:0] tmp_fu_217_p2;
reg   [31:0] tmp_reg_405;
wire   [0:0] tmp_1_fu_223_p2;
reg   [0:0] tmp_1_reg_410;
wire   [29:0] p_v_fu_323_p3;
reg   [29:0] p_v_reg_415;
wire   [0:0] ap_CS_fsm_state2;
reg    ap_sig_ioackin_in_r_ARREADY;
wire   [0:0] exitcond_flatten_fu_341_p2;
wire   [18:0] indvar_flatten_next_fu_347_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [9:0] tmp_3_cast8_mid2_v_v_1_fu_373_p3;
reg   [9:0] tmp_3_cast8_mid2_v_v_1_reg_435;
wire   [0:0] pix_user_V_fu_387_p2;
reg   [0:0] pix_user_V_reg_440;
wire   [0:0] pix_last_V_fu_393_p2;
reg   [0:0] pix_last_V_reg_445;
wire   [9:0] x_1_fu_399_p2;
wire   [0:0] ap_CS_fsm_state9;
reg   [9:0] y_phi_fu_195_p4;
wire   [31:0] tmp_10_fu_331_p1;
reg    ap_reg_ioackin_in_r_ARREADY;
wire   [31:0] storemerge_fu_239_p3;
wire   [31:0] p_s_fu_229_p3;
wire   [31:0] tmp_2_fu_235_p1;
wire   [0:0] tmp_s_fu_265_p2;
wire   [0:0] tmp_9_fu_259_p2;
wire   [29:0] tmp_3_fu_277_p4;
wire   [29:0] tmp_5_fu_287_p4;
wire   [0:0] tmp_4_fu_253_p2;
wire   [29:0] tmp_8_fu_305_p4;
wire   [0:0] or_cond_fu_271_p2;
wire   [29:0] tmp_6_fu_297_p3;
wire   [29:0] tmp_12_fu_315_p3;
wire   [0:0] exitcond4_fu_353_p2;
wire   [9:0] y_s_fu_367_p2;
wire   [9:0] x_mid2_fu_359_p3;
wire   [9:0] tmp_7_fu_381_p2;
wire   [0:0] ap_CS_fsm_state13;
reg    ap_condition_906;
reg   [10:0] ap_NS_fsm;
wire   [31:0] ap_return;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'b1;
#0 outs_V_data_V_1_sel_rd = 1'b0;
#0 outs_V_data_V_1_sel_wr = 1'b0;
#0 outs_V_data_V_1_state = 2'b00;
#0 outs_V_keep_V_1_sel_rd = 1'b0;
#0 outs_V_keep_V_1_state = 2'b00;
#0 outs_V_strb_V_1_sel_rd = 1'b0;
#0 outs_V_strb_V_1_state = 2'b00;
#0 outs_V_user_V_1_sel_rd = 1'b0;
#0 outs_V_user_V_1_sel_wr = 1'b0;
#0 outs_V_user_V_1_state = 2'b00;
#0 outs_V_last_V_1_sel_rd = 1'b0;
#0 outs_V_last_V_1_sel_wr = 1'b0;
#0 outs_V_last_V_1_state = 2'b00;
#0 outs_V_id_V_1_sel_rd = 1'b0;
#0 outs_V_id_V_1_state = 2'b00;
#0 outs_V_dest_V_1_sel_rd = 1'b0;
#0 outs_V_dest_V_1_state = 2'b00;
#0 active_frame_V_0_data_reg = 2'b00;
#0 active_frame_V_0_vld_reg = 1'b0;
#0 n = 32'b00000000000000000000000000000000;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_reg_ioackin_in_r_ARREADY = 1'b0;
end

DMA_Read_addr_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
DMA_Read_addr_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(ap_const_lv32_0),
    .frame_buffer0(frame_buffer0),
    .frame_buffer1(frame_buffer1),
    .frame_buffer2(frame_buffer2),
    .mode_V(mode_V)
);

DMA_Read_addr_in_r_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_IN_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_IN_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_IN_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_IN_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_IN_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_IN_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_IN_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_IN_R_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_IN_R_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_IN_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_IN_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_IN_R_CACHE_VALUE ))
DMA_Read_addr_in_r_m_axi_U(
    .AWVALID(m_axi_in_r_AWVALID),
    .AWREADY(m_axi_in_r_AWREADY),
    .AWADDR(m_axi_in_r_AWADDR),
    .AWID(m_axi_in_r_AWID),
    .AWLEN(m_axi_in_r_AWLEN),
    .AWSIZE(m_axi_in_r_AWSIZE),
    .AWBURST(m_axi_in_r_AWBURST),
    .AWLOCK(m_axi_in_r_AWLOCK),
    .AWCACHE(m_axi_in_r_AWCACHE),
    .AWPROT(m_axi_in_r_AWPROT),
    .AWQOS(m_axi_in_r_AWQOS),
    .AWREGION(m_axi_in_r_AWREGION),
    .AWUSER(m_axi_in_r_AWUSER),
    .WVALID(m_axi_in_r_WVALID),
    .WREADY(m_axi_in_r_WREADY),
    .WDATA(m_axi_in_r_WDATA),
    .WSTRB(m_axi_in_r_WSTRB),
    .WLAST(m_axi_in_r_WLAST),
    .WID(m_axi_in_r_WID),
    .WUSER(m_axi_in_r_WUSER),
    .ARVALID(m_axi_in_r_ARVALID),
    .ARREADY(m_axi_in_r_ARREADY),
    .ARADDR(m_axi_in_r_ARADDR),
    .ARID(m_axi_in_r_ARID),
    .ARLEN(m_axi_in_r_ARLEN),
    .ARSIZE(m_axi_in_r_ARSIZE),
    .ARBURST(m_axi_in_r_ARBURST),
    .ARLOCK(m_axi_in_r_ARLOCK),
    .ARCACHE(m_axi_in_r_ARCACHE),
    .ARPROT(m_axi_in_r_ARPROT),
    .ARQOS(m_axi_in_r_ARQOS),
    .ARREGION(m_axi_in_r_ARREGION),
    .ARUSER(m_axi_in_r_ARUSER),
    .RVALID(m_axi_in_r_RVALID),
    .RREADY(m_axi_in_r_RREADY),
    .RDATA(m_axi_in_r_RDATA),
    .RLAST(m_axi_in_r_RLAST),
    .RID(m_axi_in_r_RID),
    .RUSER(m_axi_in_r_RUSER),
    .RRESP(m_axi_in_r_RRESP),
    .BVALID(m_axi_in_r_BVALID),
    .BREADY(m_axi_in_r_BREADY),
    .BRESP(m_axi_in_r_BRESP),
    .BID(m_axi_in_r_BID),
    .BUSER(m_axi_in_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(in_r_ARVALID),
    .I_ARREADY(in_r_ARREADY),
    .I_ARADDR(tmp_10_fu_331_p1),
    .I_ARID(1'b0),
    .I_ARLEN(ap_const_lv32_75300),
    .I_ARSIZE(ap_const_lv3_0),
    .I_ARLOCK(ap_const_lv2_0),
    .I_ARCACHE(ap_const_lv4_0),
    .I_ARQOS(ap_const_lv4_0),
    .I_ARPROT(ap_const_lv3_0),
    .I_ARUSER(1'b0),
    .I_ARBURST(ap_const_lv2_0),
    .I_ARREGION(ap_const_lv4_0),
    .I_RVALID(in_r_RVALID),
    .I_RREADY(in_r_RREADY),
    .I_RDATA(in_r_RDATA),
    .I_RID(in_r_RID),
    .I_RUSER(in_r_RUSER),
    .I_RRESP(in_r_RRESP),
    .I_RLAST(in_r_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(in_r_AWREADY),
    .I_AWADDR(ap_const_lv32_0),
    .I_AWID(1'b0),
    .I_AWLEN(ap_const_lv32_0),
    .I_AWSIZE(ap_const_lv3_0),
    .I_AWLOCK(ap_const_lv2_0),
    .I_AWCACHE(ap_const_lv4_0),
    .I_AWQOS(ap_const_lv4_0),
    .I_AWPROT(ap_const_lv3_0),
    .I_AWUSER(1'b0),
    .I_AWBURST(ap_const_lv2_0),
    .I_AWREGION(ap_const_lv4_0),
    .I_WVALID(1'b0),
    .I_WREADY(in_r_WREADY),
    .I_WDATA(ap_const_lv32_0),
    .I_WID(1'b0),
    .I_WUSER(1'b0),
    .I_WLAST(1'b0),
    .I_WSTRB(ap_const_lv4_0),
    .I_BVALID(in_r_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(in_r_BRESP),
    .I_BID(in_r_BID),
    .I_BUSER(in_r_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond_flatten_reg_426) & (in_r_RVALID == 1'b0)) | ((1'b0 == exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in))) & ~(1'b0 == exitcond_flatten_fu_341_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond_flatten_reg_426) & (in_r_RVALID == 1'b0)) | ((1'b0 == exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in))) & (1'b0 == exitcond_flatten_fu_341_p2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if (((1'b1 == ap_CS_fsm_state9) | ((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond_flatten_reg_426) & (in_r_RVALID == 1'b0)) | ((1'b0 == exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in))) & ~(1'b0 == exitcond_flatten_fu_341_p2)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond_flatten_reg_426) & (in_r_RVALID == 1'b0)) | ((1'b0 == exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_in_r_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            if (~(1'b0 == ap_sig_ioackin_in_r_ARREADY)) begin
                ap_reg_ioackin_in_r_ARREADY <= 1'b0;
            end else if ((1'b1 == in_r_ARREADY)) begin
                ap_reg_ioackin_in_r_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outs_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == outs_V_data_V_1_ack_out) & (1'b1 == outs_V_data_V_1_vld_out))) begin
            outs_V_data_V_1_sel_rd <= ~outs_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outs_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == outs_V_data_V_1_vld_in) & (1'b1 == outs_V_data_V_1_ack_in))) begin
            outs_V_data_V_1_sel_wr <= ~outs_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outs_V_data_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == outs_V_data_V_1_vld_in) & (1'b1 == outs_V_data_V_1_ack_out) & (outs_V_data_V_1_state == ap_const_lv2_3)) | ((1'b0 == outs_V_data_V_1_vld_in) & (outs_V_data_V_1_state == ap_const_lv2_2)))) begin
            outs_V_data_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == outs_V_data_V_1_vld_in) & (1'b0 == outs_V_data_V_1_ack_out) & (outs_V_data_V_1_state == ap_const_lv2_3)) | ((1'b0 == outs_V_data_V_1_ack_out) & (outs_V_data_V_1_state == ap_const_lv2_1)))) begin
            outs_V_data_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == outs_V_data_V_1_vld_in) & (outs_V_data_V_1_state == ap_const_lv2_2)) | ((1'b1 == outs_V_data_V_1_ack_out) & (outs_V_data_V_1_state == ap_const_lv2_1)) | ((outs_V_data_V_1_state == ap_const_lv2_3) & ~((1'b1 == outs_V_data_V_1_vld_in) & (1'b0 == outs_V_data_V_1_ack_out)) & ~((1'b0 == outs_V_data_V_1_vld_in) & (1'b1 == outs_V_data_V_1_ack_out))))) begin
            outs_V_data_V_1_state <= ap_const_lv2_3;
        end else begin
            outs_V_data_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outs_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == outs_V_dest_V_1_ack_out) & (1'b1 == outs_V_dest_V_1_vld_out))) begin
            outs_V_dest_V_1_sel_rd <= ~outs_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outs_V_dest_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == outs_V_dest_V_1_vld_in) & (1'b1 == outs_V_dest_V_1_ack_out) & (ap_const_lv2_3 == outs_V_dest_V_1_state)) | ((1'b0 == outs_V_dest_V_1_vld_in) & (ap_const_lv2_2 == outs_V_dest_V_1_state)))) begin
            outs_V_dest_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == outs_V_dest_V_1_vld_in) & (1'b0 == outs_V_dest_V_1_ack_out) & (ap_const_lv2_3 == outs_V_dest_V_1_state)) | ((1'b0 == outs_V_dest_V_1_ack_out) & (ap_const_lv2_1 == outs_V_dest_V_1_state)))) begin
            outs_V_dest_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == outs_V_dest_V_1_vld_in) & (ap_const_lv2_2 == outs_V_dest_V_1_state)) | ((1'b1 == outs_V_dest_V_1_ack_out) & (ap_const_lv2_1 == outs_V_dest_V_1_state)) | ((ap_const_lv2_3 == outs_V_dest_V_1_state) & ~((1'b1 == outs_V_dest_V_1_vld_in) & (1'b0 == outs_V_dest_V_1_ack_out)) & ~((1'b0 == outs_V_dest_V_1_vld_in) & (1'b1 == outs_V_dest_V_1_ack_out))))) begin
            outs_V_dest_V_1_state <= ap_const_lv2_3;
        end else begin
            outs_V_dest_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outs_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == outs_V_id_V_1_ack_out) & (1'b1 == outs_V_id_V_1_vld_out))) begin
            outs_V_id_V_1_sel_rd <= ~outs_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outs_V_id_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == outs_V_id_V_1_vld_in) & (1'b1 == outs_V_id_V_1_ack_out) & (ap_const_lv2_3 == outs_V_id_V_1_state)) | ((1'b0 == outs_V_id_V_1_vld_in) & (ap_const_lv2_2 == outs_V_id_V_1_state)))) begin
            outs_V_id_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == outs_V_id_V_1_vld_in) & (1'b0 == outs_V_id_V_1_ack_out) & (ap_const_lv2_3 == outs_V_id_V_1_state)) | ((1'b0 == outs_V_id_V_1_ack_out) & (ap_const_lv2_1 == outs_V_id_V_1_state)))) begin
            outs_V_id_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == outs_V_id_V_1_vld_in) & (ap_const_lv2_2 == outs_V_id_V_1_state)) | ((1'b1 == outs_V_id_V_1_ack_out) & (ap_const_lv2_1 == outs_V_id_V_1_state)) | ((ap_const_lv2_3 == outs_V_id_V_1_state) & ~((1'b1 == outs_V_id_V_1_vld_in) & (1'b0 == outs_V_id_V_1_ack_out)) & ~((1'b0 == outs_V_id_V_1_vld_in) & (1'b1 == outs_V_id_V_1_ack_out))))) begin
            outs_V_id_V_1_state <= ap_const_lv2_3;
        end else begin
            outs_V_id_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outs_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == outs_V_keep_V_1_ack_out) & (1'b1 == outs_V_keep_V_1_vld_out))) begin
            outs_V_keep_V_1_sel_rd <= ~outs_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outs_V_keep_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == outs_V_keep_V_1_vld_in) & (1'b1 == outs_V_keep_V_1_ack_out) & (ap_const_lv2_3 == outs_V_keep_V_1_state)) | ((1'b0 == outs_V_keep_V_1_vld_in) & (ap_const_lv2_2 == outs_V_keep_V_1_state)))) begin
            outs_V_keep_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == outs_V_keep_V_1_vld_in) & (1'b0 == outs_V_keep_V_1_ack_out) & (ap_const_lv2_3 == outs_V_keep_V_1_state)) | ((1'b0 == outs_V_keep_V_1_ack_out) & (ap_const_lv2_1 == outs_V_keep_V_1_state)))) begin
            outs_V_keep_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == outs_V_keep_V_1_vld_in) & (ap_const_lv2_2 == outs_V_keep_V_1_state)) | ((1'b1 == outs_V_keep_V_1_ack_out) & (ap_const_lv2_1 == outs_V_keep_V_1_state)) | ((ap_const_lv2_3 == outs_V_keep_V_1_state) & ~((1'b1 == outs_V_keep_V_1_vld_in) & (1'b0 == outs_V_keep_V_1_ack_out)) & ~((1'b0 == outs_V_keep_V_1_vld_in) & (1'b1 == outs_V_keep_V_1_ack_out))))) begin
            outs_V_keep_V_1_state <= ap_const_lv2_3;
        end else begin
            outs_V_keep_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outs_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == outs_V_last_V_1_ack_out) & (1'b1 == outs_V_last_V_1_vld_out))) begin
            outs_V_last_V_1_sel_rd <= ~outs_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outs_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == outs_V_last_V_1_vld_in) & (1'b1 == outs_V_last_V_1_ack_in))) begin
            outs_V_last_V_1_sel_wr <= ~outs_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outs_V_last_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == outs_V_last_V_1_vld_in) & (1'b1 == outs_V_last_V_1_ack_out) & (ap_const_lv2_3 == outs_V_last_V_1_state)) | ((1'b0 == outs_V_last_V_1_vld_in) & (ap_const_lv2_2 == outs_V_last_V_1_state)))) begin
            outs_V_last_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == outs_V_last_V_1_vld_in) & (1'b0 == outs_V_last_V_1_ack_out) & (ap_const_lv2_3 == outs_V_last_V_1_state)) | ((1'b0 == outs_V_last_V_1_ack_out) & (ap_const_lv2_1 == outs_V_last_V_1_state)))) begin
            outs_V_last_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == outs_V_last_V_1_vld_in) & (ap_const_lv2_2 == outs_V_last_V_1_state)) | ((1'b1 == outs_V_last_V_1_ack_out) & (ap_const_lv2_1 == outs_V_last_V_1_state)) | ((ap_const_lv2_3 == outs_V_last_V_1_state) & ~((1'b1 == outs_V_last_V_1_vld_in) & (1'b0 == outs_V_last_V_1_ack_out)) & ~((1'b0 == outs_V_last_V_1_vld_in) & (1'b1 == outs_V_last_V_1_ack_out))))) begin
            outs_V_last_V_1_state <= ap_const_lv2_3;
        end else begin
            outs_V_last_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outs_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == outs_V_strb_V_1_ack_out) & (1'b1 == outs_V_strb_V_1_vld_out))) begin
            outs_V_strb_V_1_sel_rd <= ~outs_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outs_V_strb_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == outs_V_strb_V_1_vld_in) & (1'b1 == outs_V_strb_V_1_ack_out) & (ap_const_lv2_3 == outs_V_strb_V_1_state)) | ((1'b0 == outs_V_strb_V_1_vld_in) & (ap_const_lv2_2 == outs_V_strb_V_1_state)))) begin
            outs_V_strb_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == outs_V_strb_V_1_vld_in) & (1'b0 == outs_V_strb_V_1_ack_out) & (ap_const_lv2_3 == outs_V_strb_V_1_state)) | ((1'b0 == outs_V_strb_V_1_ack_out) & (ap_const_lv2_1 == outs_V_strb_V_1_state)))) begin
            outs_V_strb_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == outs_V_strb_V_1_vld_in) & (ap_const_lv2_2 == outs_V_strb_V_1_state)) | ((1'b1 == outs_V_strb_V_1_ack_out) & (ap_const_lv2_1 == outs_V_strb_V_1_state)) | ((ap_const_lv2_3 == outs_V_strb_V_1_state) & ~((1'b1 == outs_V_strb_V_1_vld_in) & (1'b0 == outs_V_strb_V_1_ack_out)) & ~((1'b0 == outs_V_strb_V_1_vld_in) & (1'b1 == outs_V_strb_V_1_ack_out))))) begin
            outs_V_strb_V_1_state <= ap_const_lv2_3;
        end else begin
            outs_V_strb_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outs_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == outs_V_user_V_1_ack_out) & (1'b1 == outs_V_user_V_1_vld_out))) begin
            outs_V_user_V_1_sel_rd <= ~outs_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outs_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == outs_V_user_V_1_vld_in) & (1'b1 == outs_V_user_V_1_ack_in))) begin
            outs_V_user_V_1_sel_wr <= ~outs_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outs_V_user_V_1_state <= ap_const_lv2_0;
    end else begin
        if ((((1'b0 == outs_V_user_V_1_vld_in) & (1'b1 == outs_V_user_V_1_ack_out) & (ap_const_lv2_3 == outs_V_user_V_1_state)) | ((1'b0 == outs_V_user_V_1_vld_in) & (ap_const_lv2_2 == outs_V_user_V_1_state)))) begin
            outs_V_user_V_1_state <= ap_const_lv2_2;
        end else if ((((1'b1 == outs_V_user_V_1_vld_in) & (1'b0 == outs_V_user_V_1_ack_out) & (ap_const_lv2_3 == outs_V_user_V_1_state)) | ((1'b0 == outs_V_user_V_1_ack_out) & (ap_const_lv2_1 == outs_V_user_V_1_state)))) begin
            outs_V_user_V_1_state <= ap_const_lv2_1;
        end else if ((((1'b1 == outs_V_user_V_1_vld_in) & (ap_const_lv2_2 == outs_V_user_V_1_state)) | ((1'b1 == outs_V_user_V_1_ack_out) & (ap_const_lv2_1 == outs_V_user_V_1_state)) | ((ap_const_lv2_3 == outs_V_user_V_1_state) & ~((1'b1 == outs_V_user_V_1_vld_in) & (1'b0 == outs_V_user_V_1_ack_out)) & ~((1'b0 == outs_V_user_V_1_vld_in) & (1'b1 == outs_V_user_V_1_ack_out))))) begin
            outs_V_user_V_1_state <= ap_const_lv2_3;
        end else begin
            outs_V_user_V_1_state <= ap_const_lv2_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond_flatten_reg_426) & (in_r_RVALID == 1'b0)) | ((1'b0 == exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in))) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b0 == exitcond_flatten_fu_341_p2))) begin
        indvar_flatten_reg_180 <= indvar_flatten_next_fu_347_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        indvar_flatten_reg_180 <= ap_const_lv19_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond_flatten_reg_426) & (in_r_RVALID == 1'b0)) | ((1'b0 == exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in))) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b0 == exitcond_flatten_fu_341_p2))) begin
        x_reg_202 <= x_1_fu_399_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        x_reg_202 <= ap_const_lv10_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_426) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond_flatten_reg_426) & (in_r_RVALID == 1'b0)) | ((1'b0 == exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in))))) begin
        y_reg_191 <= tmp_3_cast8_mid2_v_v_1_reg_435;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        y_reg_191 <= ap_const_lv10_0;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) & (1'b0 == active_frame_V_0_vld_reg)) | (~((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) & (1'b1 == active_frame_V_0_vld_reg) & (1'b1 == active_frame_V_0_ack_out)))) begin
        active_frame_V_0_data_reg <= active_frame_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond_flatten_reg_426) & (in_r_RVALID == 1'b0)) | ((1'b0 == exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in))))) begin
        ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426 <= exitcond_flatten_reg_426;
        exitcond_flatten_reg_426 <= exitcond_flatten_fu_341_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        n <= storemerge_fu_239_p3;
        p_v_reg_415 <= p_v_fu_323_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outs_V_data_V_1_load_A)) begin
        outs_V_data_V_1_payload_A <= in_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outs_V_data_V_1_load_B)) begin
        outs_V_data_V_1_payload_B <= in_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outs_V_last_V_1_load_A)) begin
        outs_V_last_V_1_payload_A <= pix_last_V_reg_445;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outs_V_last_V_1_load_B)) begin
        outs_V_last_V_1_payload_B <= pix_last_V_reg_445;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outs_V_user_V_1_load_A)) begin
        outs_V_user_V_1_payload_A <= pix_user_V_reg_440;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == outs_V_user_V_1_load_B)) begin
        outs_V_user_V_1_payload_B <= pix_user_V_reg_440;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond_flatten_reg_426) & (in_r_RVALID == 1'b0)) | ((1'b0 == exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in))) & (1'b0 == exitcond_flatten_fu_341_p2))) begin
        pix_last_V_reg_445 <= pix_last_V_fu_393_p2;
        pix_user_V_reg_440 <= pix_user_V_fu_387_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        tmp_1_reg_410 <= tmp_1_fu_223_p2;
        tmp_reg_405 <= tmp_fu_217_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond_flatten_reg_426) & (in_r_RVALID == 1'b0)) | ((1'b0 == exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in))) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b0 == exitcond_flatten_fu_341_p2))) begin
        tmp_3_cast8_mid2_v_v_1_reg_435 <= tmp_3_cast8_mid2_v_v_1_fu_373_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & ~(ap_condition_906 == 1'b1))) begin
        active_frame_V_0_ack_out = 1'b1;
    end else begin
        active_frame_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & ~(ap_condition_906 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & ~(ap_condition_906 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_in_r_ARREADY)) begin
        ap_sig_ioackin_in_r_ARREADY = in_r_ARREADY;
    end else begin
        ap_sig_ioackin_in_r_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_reg_ioackin_in_r_ARREADY))) begin
        in_r_ARVALID = 1'b1;
    end else begin
        in_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_426) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond_flatten_reg_426) & (in_r_RVALID == 1'b0)) | ((1'b0 == exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in))))) begin
        in_r_RREADY = 1'b1;
    end else begin
        in_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_r_blk_n_AR = m_axi_in_r_ARREADY;
    end else begin
        in_r_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_426))) begin
        in_r_blk_n_R = m_axi_in_r_RVALID;
    end else begin
        in_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_426)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426)))) begin
        outs_TDATA_blk_n = outs_V_data_V_1_state[1'b1];
    end else begin
        outs_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == outs_V_data_V_1_sel)) begin
        outs_V_data_V_1_data_out = outs_V_data_V_1_payload_B;
    end else begin
        outs_V_data_V_1_data_out = outs_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_426) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond_flatten_reg_426) & (in_r_RVALID == 1'b0)) | ((1'b0 == exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in))))) begin
        outs_V_data_V_1_vld_in = 1'b1;
    end else begin
        outs_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_426) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond_flatten_reg_426) & (in_r_RVALID == 1'b0)) | ((1'b0 == exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in))))) begin
        outs_V_dest_V_1_vld_in = 1'b1;
    end else begin
        outs_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_426) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond_flatten_reg_426) & (in_r_RVALID == 1'b0)) | ((1'b0 == exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in))))) begin
        outs_V_id_V_1_vld_in = 1'b1;
    end else begin
        outs_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_426) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond_flatten_reg_426) & (in_r_RVALID == 1'b0)) | ((1'b0 == exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in))))) begin
        outs_V_keep_V_1_vld_in = 1'b1;
    end else begin
        outs_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == outs_V_last_V_1_sel)) begin
        outs_V_last_V_1_data_out = outs_V_last_V_1_payload_B;
    end else begin
        outs_V_last_V_1_data_out = outs_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_426) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond_flatten_reg_426) & (in_r_RVALID == 1'b0)) | ((1'b0 == exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in))))) begin
        outs_V_last_V_1_vld_in = 1'b1;
    end else begin
        outs_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_426) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond_flatten_reg_426) & (in_r_RVALID == 1'b0)) | ((1'b0 == exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in))))) begin
        outs_V_strb_V_1_vld_in = 1'b1;
    end else begin
        outs_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == outs_V_user_V_1_sel)) begin
        outs_V_user_V_1_data_out = outs_V_user_V_1_payload_B;
    end else begin
        outs_V_user_V_1_data_out = outs_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_426) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond_flatten_reg_426) & (in_r_RVALID == 1'b0)) | ((1'b0 == exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in))))) begin
        outs_V_user_V_1_vld_in = 1'b1;
    end else begin
        outs_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b0 == exitcond_flatten_reg_426))) begin
        y_phi_fu_195_p4 = tmp_3_cast8_mid2_v_v_1_reg_435;
    end else begin
        y_phi_fu_195_p4 = y_reg_191;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (~(1'b0 == ap_sig_ioackin_in_r_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter2) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond_flatten_reg_426) & (in_r_RVALID == 1'b0)) | ((1'b0 == exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in))) & ~(1'b1 == ap_enable_reg_pp0_iter1)) & ~(~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond_flatten_reg_426) & (in_r_RVALID == 1'b0)) | ((1'b0 == exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in))) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == exitcond_flatten_fu_341_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp0_iter2) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond_flatten_reg_426) & (in_r_RVALID == 1'b0)) | ((1'b0 == exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in))) & ~(1'b1 == ap_enable_reg_pp0_iter1)) | (~(((1'b1 == ap_enable_reg_pp0_iter1) & (((1'b0 == exitcond_flatten_reg_426) & (in_r_RVALID == 1'b0)) | ((1'b0 == exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in)))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) & (1'b0 == outs_V_data_V_1_ack_in))) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == exitcond_flatten_fu_341_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            if (~(ap_condition_906 == 1'b1)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

always @ (*) begin
    ap_condition_906 = ((outs_V_data_V_1_ack_in == 1'b0) | (outs_V_keep_V_1_ack_in == 1'b0) | (outs_V_strb_V_1_ack_in == 1'b0) | (outs_V_user_V_1_ack_in == 1'b0) | (outs_V_last_V_1_ack_in == 1'b0) | (outs_V_id_V_1_ack_in == 1'b0) | (outs_V_dest_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond4_fu_353_p2 = ((x_reg_202 == ap_const_lv10_320) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_341_p2 = ((indvar_flatten_reg_180 == ap_const_lv19_75300) ? 1'b1 : 1'b0);

assign indvar_flatten_next_fu_347_p2 = (indvar_flatten_reg_180 + ap_const_lv19_1);

assign or_cond_fu_271_p2 = (tmp_s_fu_265_p2 | tmp_9_fu_259_p2);

assign outs_TDATA = outs_V_data_V_1_data_out;

assign outs_TDEST = outs_V_dest_V_1_data_out;

assign outs_TID = outs_V_id_V_1_data_out;

assign outs_TKEEP = outs_V_keep_V_1_data_out;

assign outs_TLAST = outs_V_last_V_1_data_out;

assign outs_TSTRB = outs_V_strb_V_1_data_out;

assign outs_TUSER = outs_V_user_V_1_data_out;

assign outs_TVALID = outs_V_dest_V_1_state[1'b0];

assign outs_V_data_V_1_ack_in = outs_V_data_V_1_state[1'b1];

assign outs_V_data_V_1_ack_out = outs_TREADY;

assign outs_V_data_V_1_load_A = (outs_V_data_V_1_state_cmp_full & ~outs_V_data_V_1_sel_wr);

assign outs_V_data_V_1_load_B = (outs_V_data_V_1_sel_wr & outs_V_data_V_1_state_cmp_full);

assign outs_V_data_V_1_sel = outs_V_data_V_1_sel_rd;

assign outs_V_data_V_1_state_cmp_full = ((outs_V_data_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign outs_V_data_V_1_vld_out = outs_V_data_V_1_state[1'b0];

assign outs_V_dest_V_1_ack_in = outs_V_dest_V_1_state[1'b1];

assign outs_V_dest_V_1_ack_out = outs_TREADY;

assign outs_V_dest_V_1_data_out = 1'b0;

assign outs_V_dest_V_1_sel = outs_V_dest_V_1_sel_rd;

assign outs_V_dest_V_1_vld_out = outs_V_dest_V_1_state[1'b0];

assign outs_V_id_V_1_ack_in = outs_V_id_V_1_state[1'b1];

assign outs_V_id_V_1_ack_out = outs_TREADY;

assign outs_V_id_V_1_data_out = 1'b0;

assign outs_V_id_V_1_sel = outs_V_id_V_1_sel_rd;

assign outs_V_id_V_1_vld_out = outs_V_id_V_1_state[1'b0];

assign outs_V_keep_V_1_ack_in = outs_V_keep_V_1_state[1'b1];

assign outs_V_keep_V_1_ack_out = outs_TREADY;

assign outs_V_keep_V_1_data_out = ap_const_lv4_0;

assign outs_V_keep_V_1_sel = outs_V_keep_V_1_sel_rd;

assign outs_V_keep_V_1_vld_out = outs_V_keep_V_1_state[1'b0];

assign outs_V_last_V_1_ack_in = outs_V_last_V_1_state[1'b1];

assign outs_V_last_V_1_ack_out = outs_TREADY;

assign outs_V_last_V_1_load_A = (outs_V_last_V_1_state_cmp_full & ~outs_V_last_V_1_sel_wr);

assign outs_V_last_V_1_load_B = (outs_V_last_V_1_sel_wr & outs_V_last_V_1_state_cmp_full);

assign outs_V_last_V_1_sel = outs_V_last_V_1_sel_rd;

assign outs_V_last_V_1_state_cmp_full = ((outs_V_last_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign outs_V_last_V_1_vld_out = outs_V_last_V_1_state[1'b0];

assign outs_V_strb_V_1_ack_in = outs_V_strb_V_1_state[1'b1];

assign outs_V_strb_V_1_ack_out = outs_TREADY;

assign outs_V_strb_V_1_data_out = ap_const_lv4_0;

assign outs_V_strb_V_1_sel = outs_V_strb_V_1_sel_rd;

assign outs_V_strb_V_1_vld_out = outs_V_strb_V_1_state[1'b0];

assign outs_V_user_V_1_ack_in = outs_V_user_V_1_state[1'b1];

assign outs_V_user_V_1_ack_out = outs_TREADY;

assign outs_V_user_V_1_load_A = (outs_V_user_V_1_state_cmp_full & ~outs_V_user_V_1_sel_wr);

assign outs_V_user_V_1_load_B = (outs_V_user_V_1_sel_wr & outs_V_user_V_1_state_cmp_full);

assign outs_V_user_V_1_sel = outs_V_user_V_1_sel_rd;

assign outs_V_user_V_1_state_cmp_full = ((outs_V_user_V_1_state != ap_const_lv2_1) ? 1'b1 : 1'b0);

assign outs_V_user_V_1_vld_out = outs_V_user_V_1_state[1'b0];

assign p_s_fu_229_p3 = ((tmp_1_reg_410[0:0] === 1'b1) ? ap_const_lv32_0 : tmp_reg_405);

assign p_v_fu_323_p3 = ((or_cond_fu_271_p2[0:0] === 1'b1) ? tmp_6_fu_297_p3 : tmp_12_fu_315_p3);

assign pix_last_V_fu_393_p2 = ((x_mid2_fu_359_p3 == ap_const_lv10_31F) ? 1'b1 : 1'b0);

assign pix_user_V_fu_387_p2 = ((tmp_7_fu_381_p2 == ap_const_lv10_0) ? 1'b1 : 1'b0);

assign storemerge_fu_239_p3 = ((mode_V[0:0] === 1'b1) ? p_s_fu_229_p3 : tmp_2_fu_235_p1);

assign tmp_10_fu_331_p1 = p_v_reg_415;

assign tmp_12_fu_315_p3 = ((tmp_4_fu_253_p2[0:0] === 1'b1) ? tmp_8_fu_305_p4 : tmp_5_fu_287_p4);

assign tmp_1_fu_223_p2 = (($signed(tmp_fu_217_p2) > $signed(32'b10)) ? 1'b1 : 1'b0);

assign tmp_2_fu_235_p1 = active_frame_V_0_data_reg;

assign tmp_3_cast8_mid2_v_v_1_fu_373_p3 = ((exitcond4_fu_353_p2[0:0] === 1'b1) ? y_s_fu_367_p2 : y_phi_fu_195_p4);

assign tmp_3_fu_277_p4 = {{frame_buffer1[ap_const_lv32_1F : ap_const_lv32_2]}};

assign tmp_4_fu_253_p2 = ((storemerge_fu_239_p3 == ap_const_lv32_0) ? 1'b1 : 1'b0);

assign tmp_5_fu_287_p4 = {{frame_buffer0[ap_const_lv32_1F : ap_const_lv32_2]}};

assign tmp_6_fu_297_p3 = ((tmp_s_fu_265_p2[0:0] === 1'b1) ? tmp_3_fu_277_p4 : tmp_5_fu_287_p4);

assign tmp_7_fu_381_p2 = (x_mid2_fu_359_p3 | tmp_3_cast8_mid2_v_v_1_fu_373_p3);

assign tmp_8_fu_305_p4 = {{frame_buffer2[ap_const_lv32_1F : ap_const_lv32_2]}};

assign tmp_9_fu_259_p2 = ((storemerge_fu_239_p3 == ap_const_lv32_1) ? 1'b1 : 1'b0);

assign tmp_fu_217_p2 = (n + ap_const_lv32_1);

assign tmp_s_fu_265_p2 = ((storemerge_fu_239_p3 == ap_const_lv32_2) ? 1'b1 : 1'b0);

assign x_1_fu_399_p2 = (x_mid2_fu_359_p3 + ap_const_lv10_1);

assign x_mid2_fu_359_p3 = ((exitcond4_fu_353_p2[0:0] === 1'b1) ? ap_const_lv10_0 : x_reg_202);

assign y_s_fu_367_p2 = (y_phi_fu_195_p4 + ap_const_lv10_1);

endmodule //DMA_Read_addr

// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "DMA_Read_addr.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic DMA_Read_addr::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic DMA_Read_addr::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<11> DMA_Read_addr::ap_ST_fsm_state1 = "1";
const sc_lv<11> DMA_Read_addr::ap_ST_fsm_state2 = "10";
const sc_lv<11> DMA_Read_addr::ap_ST_fsm_state3 = "100";
const sc_lv<11> DMA_Read_addr::ap_ST_fsm_state4 = "1000";
const sc_lv<11> DMA_Read_addr::ap_ST_fsm_state5 = "10000";
const sc_lv<11> DMA_Read_addr::ap_ST_fsm_state6 = "100000";
const sc_lv<11> DMA_Read_addr::ap_ST_fsm_state7 = "1000000";
const sc_lv<11> DMA_Read_addr::ap_ST_fsm_state8 = "10000000";
const sc_lv<11> DMA_Read_addr::ap_ST_fsm_state9 = "100000000";
const sc_lv<11> DMA_Read_addr::ap_ST_fsm_pp0_stage0 = "1000000000";
const sc_lv<11> DMA_Read_addr::ap_ST_fsm_state13 = "10000000000";
const sc_lv<32> DMA_Read_addr::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> DMA_Read_addr::ap_const_lv1_1 = "1";
const bool DMA_Read_addr::ap_const_boolean_1 = true;
const sc_lv<1> DMA_Read_addr::ap_const_lv1_0 = "0";
const sc_lv<2> DMA_Read_addr::ap_const_lv2_0 = "00";
const sc_lv<2> DMA_Read_addr::ap_const_lv2_2 = "10";
const sc_lv<2> DMA_Read_addr::ap_const_lv2_3 = "11";
const sc_lv<2> DMA_Read_addr::ap_const_lv2_1 = "1";
const sc_lv<32> DMA_Read_addr::ap_const_lv32_2 = "10";
const sc_lv<32> DMA_Read_addr::ap_const_lv32_9 = "1001";
const int DMA_Read_addr::C_S_AXI_DATA_WIDTH = "100000";
const int DMA_Read_addr::C_M_AXI_DATA_WIDTH = "100000";
const int DMA_Read_addr::C_M_AXI_IN_R_TARGET_ADDR = "0000000000000000000000000000000000000000000000000000000000000000";
const int DMA_Read_addr::C_M_AXI_IN_R_USER_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int DMA_Read_addr::C_M_AXI_IN_R_PROT_VALUE = "0000000000000000000000000000000000000000000000000000000000000000";
const int DMA_Read_addr::C_M_AXI_IN_R_CACHE_VALUE = "11";
const sc_lv<32> DMA_Read_addr::ap_const_lv32_1 = "1";
const sc_lv<32> DMA_Read_addr::ap_const_lv32_8 = "1000";
const sc_lv<19> DMA_Read_addr::ap_const_lv19_0 = "0000000000000000000";
const sc_lv<10> DMA_Read_addr::ap_const_lv10_0 = "0000000000";
const sc_lv<32> DMA_Read_addr::ap_const_lv32_75300 = "1110101001100000000";
const sc_lv<3> DMA_Read_addr::ap_const_lv3_0 = "000";
const sc_lv<4> DMA_Read_addr::ap_const_lv4_0 = "0000";
const sc_lv<32> DMA_Read_addr::ap_const_lv32_1F = "11111";
const sc_lv<19> DMA_Read_addr::ap_const_lv19_75300 = "1110101001100000000";
const sc_lv<19> DMA_Read_addr::ap_const_lv19_1 = "1";
const sc_lv<10> DMA_Read_addr::ap_const_lv10_320 = "1100100000";
const sc_lv<10> DMA_Read_addr::ap_const_lv10_1 = "1";
const sc_lv<10> DMA_Read_addr::ap_const_lv10_31F = "1100011111";
const sc_lv<32> DMA_Read_addr::ap_const_lv32_A = "1010";

DMA_Read_addr::DMA_Read_addr(sc_module_name name) : sc_module(name), mVcdFile(0) {
    DMA_Read_addr_AXILiteS_s_axi_U = new DMA_Read_addr_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("DMA_Read_addr_AXILiteS_s_axi_U");
    DMA_Read_addr_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    DMA_Read_addr_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    DMA_Read_addr_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    DMA_Read_addr_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    DMA_Read_addr_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    DMA_Read_addr_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    DMA_Read_addr_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    DMA_Read_addr_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    DMA_Read_addr_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    DMA_Read_addr_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    DMA_Read_addr_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    DMA_Read_addr_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    DMA_Read_addr_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    DMA_Read_addr_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    DMA_Read_addr_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    DMA_Read_addr_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    DMA_Read_addr_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    DMA_Read_addr_AXILiteS_s_axi_U->ACLK(ap_clk);
    DMA_Read_addr_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    DMA_Read_addr_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    DMA_Read_addr_AXILiteS_s_axi_U->ap_start(ap_start);
    DMA_Read_addr_AXILiteS_s_axi_U->interrupt(interrupt);
    DMA_Read_addr_AXILiteS_s_axi_U->ap_ready(ap_ready);
    DMA_Read_addr_AXILiteS_s_axi_U->ap_done(ap_done);
    DMA_Read_addr_AXILiteS_s_axi_U->ap_idle(ap_idle);
    DMA_Read_addr_AXILiteS_s_axi_U->ap_return(ap_var_for_const1);
    DMA_Read_addr_AXILiteS_s_axi_U->frame_buffer0(frame_buffer0);
    DMA_Read_addr_AXILiteS_s_axi_U->frame_buffer1(frame_buffer1);
    DMA_Read_addr_AXILiteS_s_axi_U->frame_buffer2(frame_buffer2);
    DMA_Read_addr_AXILiteS_s_axi_U->mode_V(mode_V);
    DMA_Read_addr_in_r_m_axi_U = new DMA_Read_addr_in_r_m_axi<32,32,5,16,16,16,16,C_M_AXI_IN_R_ID_WIDTH,C_M_AXI_IN_R_ADDR_WIDTH,C_M_AXI_IN_R_DATA_WIDTH,C_M_AXI_IN_R_AWUSER_WIDTH,C_M_AXI_IN_R_ARUSER_WIDTH,C_M_AXI_IN_R_WUSER_WIDTH,C_M_AXI_IN_R_RUSER_WIDTH,C_M_AXI_IN_R_BUSER_WIDTH,C_M_AXI_IN_R_TARGET_ADDR,C_M_AXI_IN_R_USER_VALUE,C_M_AXI_IN_R_PROT_VALUE,C_M_AXI_IN_R_CACHE_VALUE>("DMA_Read_addr_in_r_m_axi_U");
    DMA_Read_addr_in_r_m_axi_U->AWVALID(m_axi_in_r_AWVALID);
    DMA_Read_addr_in_r_m_axi_U->AWREADY(m_axi_in_r_AWREADY);
    DMA_Read_addr_in_r_m_axi_U->AWADDR(m_axi_in_r_AWADDR);
    DMA_Read_addr_in_r_m_axi_U->AWID(m_axi_in_r_AWID);
    DMA_Read_addr_in_r_m_axi_U->AWLEN(m_axi_in_r_AWLEN);
    DMA_Read_addr_in_r_m_axi_U->AWSIZE(m_axi_in_r_AWSIZE);
    DMA_Read_addr_in_r_m_axi_U->AWBURST(m_axi_in_r_AWBURST);
    DMA_Read_addr_in_r_m_axi_U->AWLOCK(m_axi_in_r_AWLOCK);
    DMA_Read_addr_in_r_m_axi_U->AWCACHE(m_axi_in_r_AWCACHE);
    DMA_Read_addr_in_r_m_axi_U->AWPROT(m_axi_in_r_AWPROT);
    DMA_Read_addr_in_r_m_axi_U->AWQOS(m_axi_in_r_AWQOS);
    DMA_Read_addr_in_r_m_axi_U->AWREGION(m_axi_in_r_AWREGION);
    DMA_Read_addr_in_r_m_axi_U->AWUSER(m_axi_in_r_AWUSER);
    DMA_Read_addr_in_r_m_axi_U->WVALID(m_axi_in_r_WVALID);
    DMA_Read_addr_in_r_m_axi_U->WREADY(m_axi_in_r_WREADY);
    DMA_Read_addr_in_r_m_axi_U->WDATA(m_axi_in_r_WDATA);
    DMA_Read_addr_in_r_m_axi_U->WSTRB(m_axi_in_r_WSTRB);
    DMA_Read_addr_in_r_m_axi_U->WLAST(m_axi_in_r_WLAST);
    DMA_Read_addr_in_r_m_axi_U->WID(m_axi_in_r_WID);
    DMA_Read_addr_in_r_m_axi_U->WUSER(m_axi_in_r_WUSER);
    DMA_Read_addr_in_r_m_axi_U->ARVALID(m_axi_in_r_ARVALID);
    DMA_Read_addr_in_r_m_axi_U->ARREADY(m_axi_in_r_ARREADY);
    DMA_Read_addr_in_r_m_axi_U->ARADDR(m_axi_in_r_ARADDR);
    DMA_Read_addr_in_r_m_axi_U->ARID(m_axi_in_r_ARID);
    DMA_Read_addr_in_r_m_axi_U->ARLEN(m_axi_in_r_ARLEN);
    DMA_Read_addr_in_r_m_axi_U->ARSIZE(m_axi_in_r_ARSIZE);
    DMA_Read_addr_in_r_m_axi_U->ARBURST(m_axi_in_r_ARBURST);
    DMA_Read_addr_in_r_m_axi_U->ARLOCK(m_axi_in_r_ARLOCK);
    DMA_Read_addr_in_r_m_axi_U->ARCACHE(m_axi_in_r_ARCACHE);
    DMA_Read_addr_in_r_m_axi_U->ARPROT(m_axi_in_r_ARPROT);
    DMA_Read_addr_in_r_m_axi_U->ARQOS(m_axi_in_r_ARQOS);
    DMA_Read_addr_in_r_m_axi_U->ARREGION(m_axi_in_r_ARREGION);
    DMA_Read_addr_in_r_m_axi_U->ARUSER(m_axi_in_r_ARUSER);
    DMA_Read_addr_in_r_m_axi_U->RVALID(m_axi_in_r_RVALID);
    DMA_Read_addr_in_r_m_axi_U->RREADY(m_axi_in_r_RREADY);
    DMA_Read_addr_in_r_m_axi_U->RDATA(m_axi_in_r_RDATA);
    DMA_Read_addr_in_r_m_axi_U->RLAST(m_axi_in_r_RLAST);
    DMA_Read_addr_in_r_m_axi_U->RID(m_axi_in_r_RID);
    DMA_Read_addr_in_r_m_axi_U->RUSER(m_axi_in_r_RUSER);
    DMA_Read_addr_in_r_m_axi_U->RRESP(m_axi_in_r_RRESP);
    DMA_Read_addr_in_r_m_axi_U->BVALID(m_axi_in_r_BVALID);
    DMA_Read_addr_in_r_m_axi_U->BREADY(m_axi_in_r_BREADY);
    DMA_Read_addr_in_r_m_axi_U->BRESP(m_axi_in_r_BRESP);
    DMA_Read_addr_in_r_m_axi_U->BID(m_axi_in_r_BID);
    DMA_Read_addr_in_r_m_axi_U->BUSER(m_axi_in_r_BUSER);
    DMA_Read_addr_in_r_m_axi_U->ACLK(ap_clk);
    DMA_Read_addr_in_r_m_axi_U->ARESET(ap_rst_n_inv);
    DMA_Read_addr_in_r_m_axi_U->ACLK_EN(ap_var_for_const0);
    DMA_Read_addr_in_r_m_axi_U->I_ARVALID(in_r_ARVALID);
    DMA_Read_addr_in_r_m_axi_U->I_ARREADY(in_r_ARREADY);
    DMA_Read_addr_in_r_m_axi_U->I_ARADDR(tmp_10_fu_331_p1);
    DMA_Read_addr_in_r_m_axi_U->I_ARID(ap_var_for_const2);
    DMA_Read_addr_in_r_m_axi_U->I_ARLEN(ap_var_for_const3);
    DMA_Read_addr_in_r_m_axi_U->I_ARSIZE(ap_var_for_const4);
    DMA_Read_addr_in_r_m_axi_U->I_ARLOCK(ap_var_for_const5);
    DMA_Read_addr_in_r_m_axi_U->I_ARCACHE(ap_var_for_const6);
    DMA_Read_addr_in_r_m_axi_U->I_ARQOS(ap_var_for_const6);
    DMA_Read_addr_in_r_m_axi_U->I_ARPROT(ap_var_for_const4);
    DMA_Read_addr_in_r_m_axi_U->I_ARUSER(ap_var_for_const2);
    DMA_Read_addr_in_r_m_axi_U->I_ARBURST(ap_var_for_const5);
    DMA_Read_addr_in_r_m_axi_U->I_ARREGION(ap_var_for_const6);
    DMA_Read_addr_in_r_m_axi_U->I_RVALID(in_r_RVALID);
    DMA_Read_addr_in_r_m_axi_U->I_RREADY(in_r_RREADY);
    DMA_Read_addr_in_r_m_axi_U->I_RDATA(in_r_RDATA);
    DMA_Read_addr_in_r_m_axi_U->I_RID(in_r_RID);
    DMA_Read_addr_in_r_m_axi_U->I_RUSER(in_r_RUSER);
    DMA_Read_addr_in_r_m_axi_U->I_RRESP(in_r_RRESP);
    DMA_Read_addr_in_r_m_axi_U->I_RLAST(in_r_RLAST);
    DMA_Read_addr_in_r_m_axi_U->I_AWVALID(ap_var_for_const7);
    DMA_Read_addr_in_r_m_axi_U->I_AWREADY(in_r_AWREADY);
    DMA_Read_addr_in_r_m_axi_U->I_AWADDR(ap_var_for_const1);
    DMA_Read_addr_in_r_m_axi_U->I_AWID(ap_var_for_const2);
    DMA_Read_addr_in_r_m_axi_U->I_AWLEN(ap_var_for_const1);
    DMA_Read_addr_in_r_m_axi_U->I_AWSIZE(ap_var_for_const4);
    DMA_Read_addr_in_r_m_axi_U->I_AWLOCK(ap_var_for_const5);
    DMA_Read_addr_in_r_m_axi_U->I_AWCACHE(ap_var_for_const6);
    DMA_Read_addr_in_r_m_axi_U->I_AWQOS(ap_var_for_const6);
    DMA_Read_addr_in_r_m_axi_U->I_AWPROT(ap_var_for_const4);
    DMA_Read_addr_in_r_m_axi_U->I_AWUSER(ap_var_for_const2);
    DMA_Read_addr_in_r_m_axi_U->I_AWBURST(ap_var_for_const5);
    DMA_Read_addr_in_r_m_axi_U->I_AWREGION(ap_var_for_const6);
    DMA_Read_addr_in_r_m_axi_U->I_WVALID(ap_var_for_const7);
    DMA_Read_addr_in_r_m_axi_U->I_WREADY(in_r_WREADY);
    DMA_Read_addr_in_r_m_axi_U->I_WDATA(ap_var_for_const1);
    DMA_Read_addr_in_r_m_axi_U->I_WID(ap_var_for_const2);
    DMA_Read_addr_in_r_m_axi_U->I_WUSER(ap_var_for_const2);
    DMA_Read_addr_in_r_m_axi_U->I_WLAST(ap_var_for_const7);
    DMA_Read_addr_in_r_m_axi_U->I_WSTRB(ap_var_for_const6);
    DMA_Read_addr_in_r_m_axi_U->I_BVALID(in_r_BVALID);
    DMA_Read_addr_in_r_m_axi_U->I_BREADY(ap_var_for_const7);
    DMA_Read_addr_in_r_m_axi_U->I_BRESP(in_r_BRESP);
    DMA_Read_addr_in_r_m_axi_U->I_BID(in_r_BID);
    DMA_Read_addr_in_r_m_axi_U->I_BUSER(in_r_BUSER);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_active_frame_V_0_ack_out);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_condition_906 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_condition_906);
    sensitive << ( outs_V_data_V_1_ack_in );
    sensitive << ( outs_V_keep_V_1_ack_in );
    sensitive << ( outs_V_strb_V_1_ack_in );
    sensitive << ( outs_V_user_V_1_ack_in );
    sensitive << ( outs_V_last_V_1_ack_in );
    sensitive << ( outs_V_id_V_1_ack_in );
    sensitive << ( outs_V_dest_V_1_ack_in );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_condition_906 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_condition_906 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_ap_sig_ioackin_in_r_ARREADY);
    sensitive << ( in_r_ARREADY );
    sensitive << ( ap_reg_ioackin_in_r_ARREADY );

    SC_METHOD(thread_exitcond4_fu_353_p2);
    sensitive << ( outs_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_426 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426 );
    sensitive << ( in_r_RVALID );
    sensitive << ( x_reg_202 );
    sensitive << ( exitcond_flatten_fu_341_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_exitcond_flatten_fu_341_p2);
    sensitive << ( outs_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_426 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426 );
    sensitive << ( in_r_RVALID );
    sensitive << ( indvar_flatten_reg_180 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_in_r_ARVALID);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_reg_ioackin_in_r_ARREADY );

    SC_METHOD(thread_in_r_RREADY);
    sensitive << ( outs_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_426 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426 );
    sensitive << ( in_r_RVALID );

    SC_METHOD(thread_in_r_blk_n_AR);
    sensitive << ( m_axi_in_r_ARREADY );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_in_r_blk_n_R);
    sensitive << ( m_axi_in_r_RVALID );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_426 );

    SC_METHOD(thread_indvar_flatten_next_fu_347_p2);
    sensitive << ( indvar_flatten_reg_180 );

    SC_METHOD(thread_or_cond_fu_271_p2);
    sensitive << ( tmp_s_fu_265_p2 );
    sensitive << ( tmp_9_fu_259_p2 );

    SC_METHOD(thread_outs_TDATA);
    sensitive << ( outs_V_data_V_1_data_out );

    SC_METHOD(thread_outs_TDATA_blk_n);
    sensitive << ( outs_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_426 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426 );

    SC_METHOD(thread_outs_TDEST);
    sensitive << ( outs_V_dest_V_1_data_out );

    SC_METHOD(thread_outs_TID);
    sensitive << ( outs_V_id_V_1_data_out );

    SC_METHOD(thread_outs_TKEEP);
    sensitive << ( outs_V_keep_V_1_data_out );

    SC_METHOD(thread_outs_TLAST);
    sensitive << ( outs_V_last_V_1_data_out );

    SC_METHOD(thread_outs_TSTRB);
    sensitive << ( outs_V_strb_V_1_data_out );

    SC_METHOD(thread_outs_TUSER);
    sensitive << ( outs_V_user_V_1_data_out );

    SC_METHOD(thread_outs_TVALID);
    sensitive << ( outs_V_dest_V_1_state );

    SC_METHOD(thread_outs_V_data_V_1_ack_in);
    sensitive << ( outs_V_data_V_1_state );

    SC_METHOD(thread_outs_V_data_V_1_ack_out);
    sensitive << ( outs_TREADY );

    SC_METHOD(thread_outs_V_data_V_1_data_out);
    sensitive << ( outs_V_data_V_1_payload_A );
    sensitive << ( outs_V_data_V_1_payload_B );
    sensitive << ( outs_V_data_V_1_sel );

    SC_METHOD(thread_outs_V_data_V_1_load_A);
    sensitive << ( outs_V_data_V_1_sel_wr );
    sensitive << ( outs_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_outs_V_data_V_1_load_B);
    sensitive << ( outs_V_data_V_1_sel_wr );
    sensitive << ( outs_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_outs_V_data_V_1_sel);
    sensitive << ( outs_V_data_V_1_sel_rd );

    SC_METHOD(thread_outs_V_data_V_1_state_cmp_full);
    sensitive << ( outs_V_data_V_1_state );

    SC_METHOD(thread_outs_V_data_V_1_vld_in);
    sensitive << ( outs_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_426 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426 );
    sensitive << ( in_r_RVALID );

    SC_METHOD(thread_outs_V_data_V_1_vld_out);
    sensitive << ( outs_V_data_V_1_state );

    SC_METHOD(thread_outs_V_dest_V_1_ack_in);
    sensitive << ( outs_V_dest_V_1_state );

    SC_METHOD(thread_outs_V_dest_V_1_ack_out);
    sensitive << ( outs_TREADY );

    SC_METHOD(thread_outs_V_dest_V_1_data_out);
    sensitive << ( outs_V_dest_V_1_sel );

    SC_METHOD(thread_outs_V_dest_V_1_sel);
    sensitive << ( outs_V_dest_V_1_sel_rd );

    SC_METHOD(thread_outs_V_dest_V_1_vld_in);
    sensitive << ( outs_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_426 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426 );
    sensitive << ( in_r_RVALID );

    SC_METHOD(thread_outs_V_dest_V_1_vld_out);
    sensitive << ( outs_V_dest_V_1_state );

    SC_METHOD(thread_outs_V_id_V_1_ack_in);
    sensitive << ( outs_V_id_V_1_state );

    SC_METHOD(thread_outs_V_id_V_1_ack_out);
    sensitive << ( outs_TREADY );

    SC_METHOD(thread_outs_V_id_V_1_data_out);
    sensitive << ( outs_V_id_V_1_sel );

    SC_METHOD(thread_outs_V_id_V_1_sel);
    sensitive << ( outs_V_id_V_1_sel_rd );

    SC_METHOD(thread_outs_V_id_V_1_vld_in);
    sensitive << ( outs_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_426 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426 );
    sensitive << ( in_r_RVALID );

    SC_METHOD(thread_outs_V_id_V_1_vld_out);
    sensitive << ( outs_V_id_V_1_state );

    SC_METHOD(thread_outs_V_keep_V_1_ack_in);
    sensitive << ( outs_V_keep_V_1_state );

    SC_METHOD(thread_outs_V_keep_V_1_ack_out);
    sensitive << ( outs_TREADY );

    SC_METHOD(thread_outs_V_keep_V_1_data_out);
    sensitive << ( outs_V_keep_V_1_sel );

    SC_METHOD(thread_outs_V_keep_V_1_sel);
    sensitive << ( outs_V_keep_V_1_sel_rd );

    SC_METHOD(thread_outs_V_keep_V_1_vld_in);
    sensitive << ( outs_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_426 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426 );
    sensitive << ( in_r_RVALID );

    SC_METHOD(thread_outs_V_keep_V_1_vld_out);
    sensitive << ( outs_V_keep_V_1_state );

    SC_METHOD(thread_outs_V_last_V_1_ack_in);
    sensitive << ( outs_V_last_V_1_state );

    SC_METHOD(thread_outs_V_last_V_1_ack_out);
    sensitive << ( outs_TREADY );

    SC_METHOD(thread_outs_V_last_V_1_data_out);
    sensitive << ( outs_V_last_V_1_payload_A );
    sensitive << ( outs_V_last_V_1_payload_B );
    sensitive << ( outs_V_last_V_1_sel );

    SC_METHOD(thread_outs_V_last_V_1_load_A);
    sensitive << ( outs_V_last_V_1_sel_wr );
    sensitive << ( outs_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_outs_V_last_V_1_load_B);
    sensitive << ( outs_V_last_V_1_sel_wr );
    sensitive << ( outs_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_outs_V_last_V_1_sel);
    sensitive << ( outs_V_last_V_1_sel_rd );

    SC_METHOD(thread_outs_V_last_V_1_state_cmp_full);
    sensitive << ( outs_V_last_V_1_state );

    SC_METHOD(thread_outs_V_last_V_1_vld_in);
    sensitive << ( outs_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_426 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426 );
    sensitive << ( in_r_RVALID );

    SC_METHOD(thread_outs_V_last_V_1_vld_out);
    sensitive << ( outs_V_last_V_1_state );

    SC_METHOD(thread_outs_V_strb_V_1_ack_in);
    sensitive << ( outs_V_strb_V_1_state );

    SC_METHOD(thread_outs_V_strb_V_1_ack_out);
    sensitive << ( outs_TREADY );

    SC_METHOD(thread_outs_V_strb_V_1_data_out);
    sensitive << ( outs_V_strb_V_1_sel );

    SC_METHOD(thread_outs_V_strb_V_1_sel);
    sensitive << ( outs_V_strb_V_1_sel_rd );

    SC_METHOD(thread_outs_V_strb_V_1_vld_in);
    sensitive << ( outs_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_426 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426 );
    sensitive << ( in_r_RVALID );

    SC_METHOD(thread_outs_V_strb_V_1_vld_out);
    sensitive << ( outs_V_strb_V_1_state );

    SC_METHOD(thread_outs_V_user_V_1_ack_in);
    sensitive << ( outs_V_user_V_1_state );

    SC_METHOD(thread_outs_V_user_V_1_ack_out);
    sensitive << ( outs_TREADY );

    SC_METHOD(thread_outs_V_user_V_1_data_out);
    sensitive << ( outs_V_user_V_1_payload_A );
    sensitive << ( outs_V_user_V_1_payload_B );
    sensitive << ( outs_V_user_V_1_sel );

    SC_METHOD(thread_outs_V_user_V_1_load_A);
    sensitive << ( outs_V_user_V_1_sel_wr );
    sensitive << ( outs_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_outs_V_user_V_1_load_B);
    sensitive << ( outs_V_user_V_1_sel_wr );
    sensitive << ( outs_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_outs_V_user_V_1_sel);
    sensitive << ( outs_V_user_V_1_sel_rd );

    SC_METHOD(thread_outs_V_user_V_1_state_cmp_full);
    sensitive << ( outs_V_user_V_1_state );

    SC_METHOD(thread_outs_V_user_V_1_vld_in);
    sensitive << ( outs_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_426 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426 );
    sensitive << ( in_r_RVALID );

    SC_METHOD(thread_outs_V_user_V_1_vld_out);
    sensitive << ( outs_V_user_V_1_state );

    SC_METHOD(thread_p_s_fu_229_p3);
    sensitive << ( tmp_reg_405 );
    sensitive << ( tmp_1_reg_410 );

    SC_METHOD(thread_p_v_fu_323_p3);
    sensitive << ( or_cond_fu_271_p2 );
    sensitive << ( tmp_6_fu_297_p3 );
    sensitive << ( tmp_12_fu_315_p3 );

    SC_METHOD(thread_pix_last_V_fu_393_p2);
    sensitive << ( outs_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_426 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426 );
    sensitive << ( in_r_RVALID );
    sensitive << ( exitcond_flatten_fu_341_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( x_mid2_fu_359_p3 );

    SC_METHOD(thread_pix_user_V_fu_387_p2);
    sensitive << ( outs_V_data_V_1_ack_in );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_426 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426 );
    sensitive << ( in_r_RVALID );
    sensitive << ( exitcond_flatten_fu_341_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_7_fu_381_p2 );

    SC_METHOD(thread_storemerge_fu_239_p3);
    sensitive << ( mode_V );
    sensitive << ( p_s_fu_229_p3 );
    sensitive << ( tmp_2_fu_235_p1 );

    SC_METHOD(thread_tmp_10_fu_331_p1);
    sensitive << ( p_v_reg_415 );

    SC_METHOD(thread_tmp_12_fu_315_p3);
    sensitive << ( tmp_5_fu_287_p4 );
    sensitive << ( tmp_4_fu_253_p2 );
    sensitive << ( tmp_8_fu_305_p4 );

    SC_METHOD(thread_tmp_1_fu_223_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_217_p2 );

    SC_METHOD(thread_tmp_2_fu_235_p1);
    sensitive << ( active_frame_V_0_data_reg );

    SC_METHOD(thread_tmp_3_cast8_mid2_v_v_1_fu_373_p3);
    sensitive << ( y_phi_fu_195_p4 );
    sensitive << ( exitcond4_fu_353_p2 );
    sensitive << ( y_s_fu_367_p2 );

    SC_METHOD(thread_tmp_3_fu_277_p4);
    sensitive << ( frame_buffer1 );

    SC_METHOD(thread_tmp_4_fu_253_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( storemerge_fu_239_p3 );

    SC_METHOD(thread_tmp_5_fu_287_p4);
    sensitive << ( frame_buffer0 );

    SC_METHOD(thread_tmp_6_fu_297_p3);
    sensitive << ( tmp_s_fu_265_p2 );
    sensitive << ( tmp_3_fu_277_p4 );
    sensitive << ( tmp_5_fu_287_p4 );

    SC_METHOD(thread_tmp_7_fu_381_p2);
    sensitive << ( tmp_3_cast8_mid2_v_v_1_fu_373_p3 );
    sensitive << ( x_mid2_fu_359_p3 );

    SC_METHOD(thread_tmp_8_fu_305_p4);
    sensitive << ( frame_buffer2 );

    SC_METHOD(thread_tmp_9_fu_259_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( storemerge_fu_239_p3 );

    SC_METHOD(thread_tmp_fu_217_p2);
    sensitive << ( n );

    SC_METHOD(thread_tmp_s_fu_265_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( storemerge_fu_239_p3 );

    SC_METHOD(thread_x_1_fu_399_p2);
    sensitive << ( x_mid2_fu_359_p3 );

    SC_METHOD(thread_x_mid2_fu_359_p3);
    sensitive << ( x_reg_202 );
    sensitive << ( exitcond4_fu_353_p2 );

    SC_METHOD(thread_y_phi_fu_195_p4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_426 );
    sensitive << ( y_reg_191 );
    sensitive << ( tmp_3_cast8_mid2_v_v_1_reg_435 );

    SC_METHOD(thread_y_s_fu_367_p2);
    sensitive << ( y_phi_fu_195_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( outs_V_data_V_1_ack_in );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_426 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426 );
    sensitive << ( in_r_RVALID );
    sensitive << ( ap_sig_ioackin_in_r_ARREADY );
    sensitive << ( exitcond_flatten_fu_341_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_condition_906 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const7);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    SC_THREAD(thread_ap_var_for_const5);

    SC_THREAD(thread_ap_var_for_const3);

    SC_THREAD(thread_ap_var_for_const4);

    SC_THREAD(thread_ap_var_for_const6);

    ap_CS_fsm = "00000000001";
    outs_V_data_V_1_sel_rd = SC_LOGIC_0;
    outs_V_data_V_1_sel_wr = SC_LOGIC_0;
    outs_V_data_V_1_state = "00";
    outs_V_keep_V_1_sel_rd = SC_LOGIC_0;
    outs_V_keep_V_1_state = "00";
    outs_V_strb_V_1_sel_rd = SC_LOGIC_0;
    outs_V_strb_V_1_state = "00";
    outs_V_user_V_1_sel_rd = SC_LOGIC_0;
    outs_V_user_V_1_sel_wr = SC_LOGIC_0;
    outs_V_user_V_1_state = "00";
    outs_V_last_V_1_sel_rd = SC_LOGIC_0;
    outs_V_last_V_1_sel_wr = SC_LOGIC_0;
    outs_V_last_V_1_state = "00";
    outs_V_id_V_1_sel_rd = SC_LOGIC_0;
    outs_V_id_V_1_state = "00";
    outs_V_dest_V_1_sel_rd = SC_LOGIC_0;
    outs_V_dest_V_1_state = "00";
    active_frame_V_0_data_reg = "00";
    active_frame_V_0_vld_reg = SC_LOGIC_0;
    n = "00000000000000000000000000000000";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_reg_ioackin_in_r_ARREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "DMA_Read_addr_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, m_axi_in_r_AWVALID, "(port)m_axi_in_r_AWVALID");
    sc_trace(mVcdFile, m_axi_in_r_AWREADY, "(port)m_axi_in_r_AWREADY");
    sc_trace(mVcdFile, m_axi_in_r_AWADDR, "(port)m_axi_in_r_AWADDR");
    sc_trace(mVcdFile, m_axi_in_r_AWID, "(port)m_axi_in_r_AWID");
    sc_trace(mVcdFile, m_axi_in_r_AWLEN, "(port)m_axi_in_r_AWLEN");
    sc_trace(mVcdFile, m_axi_in_r_AWSIZE, "(port)m_axi_in_r_AWSIZE");
    sc_trace(mVcdFile, m_axi_in_r_AWBURST, "(port)m_axi_in_r_AWBURST");
    sc_trace(mVcdFile, m_axi_in_r_AWLOCK, "(port)m_axi_in_r_AWLOCK");
    sc_trace(mVcdFile, m_axi_in_r_AWCACHE, "(port)m_axi_in_r_AWCACHE");
    sc_trace(mVcdFile, m_axi_in_r_AWPROT, "(port)m_axi_in_r_AWPROT");
    sc_trace(mVcdFile, m_axi_in_r_AWQOS, "(port)m_axi_in_r_AWQOS");
    sc_trace(mVcdFile, m_axi_in_r_AWREGION, "(port)m_axi_in_r_AWREGION");
    sc_trace(mVcdFile, m_axi_in_r_AWUSER, "(port)m_axi_in_r_AWUSER");
    sc_trace(mVcdFile, m_axi_in_r_WVALID, "(port)m_axi_in_r_WVALID");
    sc_trace(mVcdFile, m_axi_in_r_WREADY, "(port)m_axi_in_r_WREADY");
    sc_trace(mVcdFile, m_axi_in_r_WDATA, "(port)m_axi_in_r_WDATA");
    sc_trace(mVcdFile, m_axi_in_r_WSTRB, "(port)m_axi_in_r_WSTRB");
    sc_trace(mVcdFile, m_axi_in_r_WLAST, "(port)m_axi_in_r_WLAST");
    sc_trace(mVcdFile, m_axi_in_r_WID, "(port)m_axi_in_r_WID");
    sc_trace(mVcdFile, m_axi_in_r_WUSER, "(port)m_axi_in_r_WUSER");
    sc_trace(mVcdFile, m_axi_in_r_ARVALID, "(port)m_axi_in_r_ARVALID");
    sc_trace(mVcdFile, m_axi_in_r_ARREADY, "(port)m_axi_in_r_ARREADY");
    sc_trace(mVcdFile, m_axi_in_r_ARADDR, "(port)m_axi_in_r_ARADDR");
    sc_trace(mVcdFile, m_axi_in_r_ARID, "(port)m_axi_in_r_ARID");
    sc_trace(mVcdFile, m_axi_in_r_ARLEN, "(port)m_axi_in_r_ARLEN");
    sc_trace(mVcdFile, m_axi_in_r_ARSIZE, "(port)m_axi_in_r_ARSIZE");
    sc_trace(mVcdFile, m_axi_in_r_ARBURST, "(port)m_axi_in_r_ARBURST");
    sc_trace(mVcdFile, m_axi_in_r_ARLOCK, "(port)m_axi_in_r_ARLOCK");
    sc_trace(mVcdFile, m_axi_in_r_ARCACHE, "(port)m_axi_in_r_ARCACHE");
    sc_trace(mVcdFile, m_axi_in_r_ARPROT, "(port)m_axi_in_r_ARPROT");
    sc_trace(mVcdFile, m_axi_in_r_ARQOS, "(port)m_axi_in_r_ARQOS");
    sc_trace(mVcdFile, m_axi_in_r_ARREGION, "(port)m_axi_in_r_ARREGION");
    sc_trace(mVcdFile, m_axi_in_r_ARUSER, "(port)m_axi_in_r_ARUSER");
    sc_trace(mVcdFile, m_axi_in_r_RVALID, "(port)m_axi_in_r_RVALID");
    sc_trace(mVcdFile, m_axi_in_r_RREADY, "(port)m_axi_in_r_RREADY");
    sc_trace(mVcdFile, m_axi_in_r_RDATA, "(port)m_axi_in_r_RDATA");
    sc_trace(mVcdFile, m_axi_in_r_RLAST, "(port)m_axi_in_r_RLAST");
    sc_trace(mVcdFile, m_axi_in_r_RID, "(port)m_axi_in_r_RID");
    sc_trace(mVcdFile, m_axi_in_r_RUSER, "(port)m_axi_in_r_RUSER");
    sc_trace(mVcdFile, m_axi_in_r_RRESP, "(port)m_axi_in_r_RRESP");
    sc_trace(mVcdFile, m_axi_in_r_BVALID, "(port)m_axi_in_r_BVALID");
    sc_trace(mVcdFile, m_axi_in_r_BREADY, "(port)m_axi_in_r_BREADY");
    sc_trace(mVcdFile, m_axi_in_r_BRESP, "(port)m_axi_in_r_BRESP");
    sc_trace(mVcdFile, m_axi_in_r_BID, "(port)m_axi_in_r_BID");
    sc_trace(mVcdFile, m_axi_in_r_BUSER, "(port)m_axi_in_r_BUSER");
    sc_trace(mVcdFile, outs_TDATA, "(port)outs_TDATA");
    sc_trace(mVcdFile, outs_TVALID, "(port)outs_TVALID");
    sc_trace(mVcdFile, outs_TREADY, "(port)outs_TREADY");
    sc_trace(mVcdFile, outs_TKEEP, "(port)outs_TKEEP");
    sc_trace(mVcdFile, outs_TSTRB, "(port)outs_TSTRB");
    sc_trace(mVcdFile, outs_TUSER, "(port)outs_TUSER");
    sc_trace(mVcdFile, outs_TLAST, "(port)outs_TLAST");
    sc_trace(mVcdFile, outs_TID, "(port)outs_TID");
    sc_trace(mVcdFile, outs_TDEST, "(port)outs_TDEST");
    sc_trace(mVcdFile, active_frame_V, "(port)active_frame_V");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, outs_V_data_V_1_data_out, "outs_V_data_V_1_data_out");
    sc_trace(mVcdFile, outs_V_data_V_1_vld_in, "outs_V_data_V_1_vld_in");
    sc_trace(mVcdFile, outs_V_data_V_1_vld_out, "outs_V_data_V_1_vld_out");
    sc_trace(mVcdFile, outs_V_data_V_1_ack_in, "outs_V_data_V_1_ack_in");
    sc_trace(mVcdFile, outs_V_data_V_1_ack_out, "outs_V_data_V_1_ack_out");
    sc_trace(mVcdFile, outs_V_data_V_1_payload_A, "outs_V_data_V_1_payload_A");
    sc_trace(mVcdFile, outs_V_data_V_1_payload_B, "outs_V_data_V_1_payload_B");
    sc_trace(mVcdFile, outs_V_data_V_1_sel_rd, "outs_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, outs_V_data_V_1_sel_wr, "outs_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, outs_V_data_V_1_sel, "outs_V_data_V_1_sel");
    sc_trace(mVcdFile, outs_V_data_V_1_load_A, "outs_V_data_V_1_load_A");
    sc_trace(mVcdFile, outs_V_data_V_1_load_B, "outs_V_data_V_1_load_B");
    sc_trace(mVcdFile, outs_V_data_V_1_state, "outs_V_data_V_1_state");
    sc_trace(mVcdFile, outs_V_data_V_1_state_cmp_full, "outs_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, outs_V_keep_V_1_data_out, "outs_V_keep_V_1_data_out");
    sc_trace(mVcdFile, outs_V_keep_V_1_vld_in, "outs_V_keep_V_1_vld_in");
    sc_trace(mVcdFile, outs_V_keep_V_1_vld_out, "outs_V_keep_V_1_vld_out");
    sc_trace(mVcdFile, outs_V_keep_V_1_ack_in, "outs_V_keep_V_1_ack_in");
    sc_trace(mVcdFile, outs_V_keep_V_1_ack_out, "outs_V_keep_V_1_ack_out");
    sc_trace(mVcdFile, outs_V_keep_V_1_sel_rd, "outs_V_keep_V_1_sel_rd");
    sc_trace(mVcdFile, outs_V_keep_V_1_sel, "outs_V_keep_V_1_sel");
    sc_trace(mVcdFile, outs_V_keep_V_1_state, "outs_V_keep_V_1_state");
    sc_trace(mVcdFile, outs_V_strb_V_1_data_out, "outs_V_strb_V_1_data_out");
    sc_trace(mVcdFile, outs_V_strb_V_1_vld_in, "outs_V_strb_V_1_vld_in");
    sc_trace(mVcdFile, outs_V_strb_V_1_vld_out, "outs_V_strb_V_1_vld_out");
    sc_trace(mVcdFile, outs_V_strb_V_1_ack_in, "outs_V_strb_V_1_ack_in");
    sc_trace(mVcdFile, outs_V_strb_V_1_ack_out, "outs_V_strb_V_1_ack_out");
    sc_trace(mVcdFile, outs_V_strb_V_1_sel_rd, "outs_V_strb_V_1_sel_rd");
    sc_trace(mVcdFile, outs_V_strb_V_1_sel, "outs_V_strb_V_1_sel");
    sc_trace(mVcdFile, outs_V_strb_V_1_state, "outs_V_strb_V_1_state");
    sc_trace(mVcdFile, outs_V_user_V_1_data_out, "outs_V_user_V_1_data_out");
    sc_trace(mVcdFile, outs_V_user_V_1_vld_in, "outs_V_user_V_1_vld_in");
    sc_trace(mVcdFile, outs_V_user_V_1_vld_out, "outs_V_user_V_1_vld_out");
    sc_trace(mVcdFile, outs_V_user_V_1_ack_in, "outs_V_user_V_1_ack_in");
    sc_trace(mVcdFile, outs_V_user_V_1_ack_out, "outs_V_user_V_1_ack_out");
    sc_trace(mVcdFile, outs_V_user_V_1_payload_A, "outs_V_user_V_1_payload_A");
    sc_trace(mVcdFile, outs_V_user_V_1_payload_B, "outs_V_user_V_1_payload_B");
    sc_trace(mVcdFile, outs_V_user_V_1_sel_rd, "outs_V_user_V_1_sel_rd");
    sc_trace(mVcdFile, outs_V_user_V_1_sel_wr, "outs_V_user_V_1_sel_wr");
    sc_trace(mVcdFile, outs_V_user_V_1_sel, "outs_V_user_V_1_sel");
    sc_trace(mVcdFile, outs_V_user_V_1_load_A, "outs_V_user_V_1_load_A");
    sc_trace(mVcdFile, outs_V_user_V_1_load_B, "outs_V_user_V_1_load_B");
    sc_trace(mVcdFile, outs_V_user_V_1_state, "outs_V_user_V_1_state");
    sc_trace(mVcdFile, outs_V_user_V_1_state_cmp_full, "outs_V_user_V_1_state_cmp_full");
    sc_trace(mVcdFile, outs_V_last_V_1_data_out, "outs_V_last_V_1_data_out");
    sc_trace(mVcdFile, outs_V_last_V_1_vld_in, "outs_V_last_V_1_vld_in");
    sc_trace(mVcdFile, outs_V_last_V_1_vld_out, "outs_V_last_V_1_vld_out");
    sc_trace(mVcdFile, outs_V_last_V_1_ack_in, "outs_V_last_V_1_ack_in");
    sc_trace(mVcdFile, outs_V_last_V_1_ack_out, "outs_V_last_V_1_ack_out");
    sc_trace(mVcdFile, outs_V_last_V_1_payload_A, "outs_V_last_V_1_payload_A");
    sc_trace(mVcdFile, outs_V_last_V_1_payload_B, "outs_V_last_V_1_payload_B");
    sc_trace(mVcdFile, outs_V_last_V_1_sel_rd, "outs_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, outs_V_last_V_1_sel_wr, "outs_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, outs_V_last_V_1_sel, "outs_V_last_V_1_sel");
    sc_trace(mVcdFile, outs_V_last_V_1_load_A, "outs_V_last_V_1_load_A");
    sc_trace(mVcdFile, outs_V_last_V_1_load_B, "outs_V_last_V_1_load_B");
    sc_trace(mVcdFile, outs_V_last_V_1_state, "outs_V_last_V_1_state");
    sc_trace(mVcdFile, outs_V_last_V_1_state_cmp_full, "outs_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, outs_V_id_V_1_data_out, "outs_V_id_V_1_data_out");
    sc_trace(mVcdFile, outs_V_id_V_1_vld_in, "outs_V_id_V_1_vld_in");
    sc_trace(mVcdFile, outs_V_id_V_1_vld_out, "outs_V_id_V_1_vld_out");
    sc_trace(mVcdFile, outs_V_id_V_1_ack_in, "outs_V_id_V_1_ack_in");
    sc_trace(mVcdFile, outs_V_id_V_1_ack_out, "outs_V_id_V_1_ack_out");
    sc_trace(mVcdFile, outs_V_id_V_1_sel_rd, "outs_V_id_V_1_sel_rd");
    sc_trace(mVcdFile, outs_V_id_V_1_sel, "outs_V_id_V_1_sel");
    sc_trace(mVcdFile, outs_V_id_V_1_state, "outs_V_id_V_1_state");
    sc_trace(mVcdFile, outs_V_dest_V_1_data_out, "outs_V_dest_V_1_data_out");
    sc_trace(mVcdFile, outs_V_dest_V_1_vld_in, "outs_V_dest_V_1_vld_in");
    sc_trace(mVcdFile, outs_V_dest_V_1_vld_out, "outs_V_dest_V_1_vld_out");
    sc_trace(mVcdFile, outs_V_dest_V_1_ack_in, "outs_V_dest_V_1_ack_in");
    sc_trace(mVcdFile, outs_V_dest_V_1_ack_out, "outs_V_dest_V_1_ack_out");
    sc_trace(mVcdFile, outs_V_dest_V_1_sel_rd, "outs_V_dest_V_1_sel_rd");
    sc_trace(mVcdFile, outs_V_dest_V_1_sel, "outs_V_dest_V_1_sel");
    sc_trace(mVcdFile, outs_V_dest_V_1_state, "outs_V_dest_V_1_state");
    sc_trace(mVcdFile, frame_buffer0, "frame_buffer0");
    sc_trace(mVcdFile, frame_buffer1, "frame_buffer1");
    sc_trace(mVcdFile, frame_buffer2, "frame_buffer2");
    sc_trace(mVcdFile, active_frame_V_0_data_reg, "active_frame_V_0_data_reg");
    sc_trace(mVcdFile, active_frame_V_0_vld_reg, "active_frame_V_0_vld_reg");
    sc_trace(mVcdFile, active_frame_V_0_ack_out, "active_frame_V_0_ack_out");
    sc_trace(mVcdFile, mode_V, "mode_V");
    sc_trace(mVcdFile, n, "n");
    sc_trace(mVcdFile, in_r_blk_n_AR, "in_r_blk_n_AR");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, in_r_blk_n_R, "in_r_blk_n_R");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, exitcond_flatten_reg_426, "exitcond_flatten_reg_426");
    sc_trace(mVcdFile, outs_TDATA_blk_n, "outs_TDATA_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426, "ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426");
    sc_trace(mVcdFile, in_r_AWREADY, "in_r_AWREADY");
    sc_trace(mVcdFile, in_r_WREADY, "in_r_WREADY");
    sc_trace(mVcdFile, in_r_ARVALID, "in_r_ARVALID");
    sc_trace(mVcdFile, in_r_ARREADY, "in_r_ARREADY");
    sc_trace(mVcdFile, in_r_RVALID, "in_r_RVALID");
    sc_trace(mVcdFile, in_r_RREADY, "in_r_RREADY");
    sc_trace(mVcdFile, in_r_RDATA, "in_r_RDATA");
    sc_trace(mVcdFile, in_r_RLAST, "in_r_RLAST");
    sc_trace(mVcdFile, in_r_RID, "in_r_RID");
    sc_trace(mVcdFile, in_r_RUSER, "in_r_RUSER");
    sc_trace(mVcdFile, in_r_RRESP, "in_r_RRESP");
    sc_trace(mVcdFile, in_r_BVALID, "in_r_BVALID");
    sc_trace(mVcdFile, in_r_BRESP, "in_r_BRESP");
    sc_trace(mVcdFile, in_r_BID, "in_r_BID");
    sc_trace(mVcdFile, in_r_BUSER, "in_r_BUSER");
    sc_trace(mVcdFile, indvar_flatten_reg_180, "indvar_flatten_reg_180");
    sc_trace(mVcdFile, y_reg_191, "y_reg_191");
    sc_trace(mVcdFile, x_reg_202, "x_reg_202");
    sc_trace(mVcdFile, tmp_fu_217_p2, "tmp_fu_217_p2");
    sc_trace(mVcdFile, tmp_reg_405, "tmp_reg_405");
    sc_trace(mVcdFile, tmp_1_fu_223_p2, "tmp_1_fu_223_p2");
    sc_trace(mVcdFile, tmp_1_reg_410, "tmp_1_reg_410");
    sc_trace(mVcdFile, p_v_fu_323_p3, "p_v_fu_323_p3");
    sc_trace(mVcdFile, p_v_reg_415, "p_v_reg_415");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_sig_ioackin_in_r_ARREADY, "ap_sig_ioackin_in_r_ARREADY");
    sc_trace(mVcdFile, exitcond_flatten_fu_341_p2, "exitcond_flatten_fu_341_p2");
    sc_trace(mVcdFile, indvar_flatten_next_fu_347_p2, "indvar_flatten_next_fu_347_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, tmp_3_cast8_mid2_v_v_1_fu_373_p3, "tmp_3_cast8_mid2_v_v_1_fu_373_p3");
    sc_trace(mVcdFile, tmp_3_cast8_mid2_v_v_1_reg_435, "tmp_3_cast8_mid2_v_v_1_reg_435");
    sc_trace(mVcdFile, pix_user_V_fu_387_p2, "pix_user_V_fu_387_p2");
    sc_trace(mVcdFile, pix_user_V_reg_440, "pix_user_V_reg_440");
    sc_trace(mVcdFile, pix_last_V_fu_393_p2, "pix_last_V_fu_393_p2");
    sc_trace(mVcdFile, pix_last_V_reg_445, "pix_last_V_reg_445");
    sc_trace(mVcdFile, x_1_fu_399_p2, "x_1_fu_399_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, y_phi_fu_195_p4, "y_phi_fu_195_p4");
    sc_trace(mVcdFile, tmp_10_fu_331_p1, "tmp_10_fu_331_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_in_r_ARREADY, "ap_reg_ioackin_in_r_ARREADY");
    sc_trace(mVcdFile, storemerge_fu_239_p3, "storemerge_fu_239_p3");
    sc_trace(mVcdFile, p_s_fu_229_p3, "p_s_fu_229_p3");
    sc_trace(mVcdFile, tmp_2_fu_235_p1, "tmp_2_fu_235_p1");
    sc_trace(mVcdFile, tmp_s_fu_265_p2, "tmp_s_fu_265_p2");
    sc_trace(mVcdFile, tmp_9_fu_259_p2, "tmp_9_fu_259_p2");
    sc_trace(mVcdFile, tmp_3_fu_277_p4, "tmp_3_fu_277_p4");
    sc_trace(mVcdFile, tmp_5_fu_287_p4, "tmp_5_fu_287_p4");
    sc_trace(mVcdFile, tmp_4_fu_253_p2, "tmp_4_fu_253_p2");
    sc_trace(mVcdFile, tmp_8_fu_305_p4, "tmp_8_fu_305_p4");
    sc_trace(mVcdFile, or_cond_fu_271_p2, "or_cond_fu_271_p2");
    sc_trace(mVcdFile, tmp_6_fu_297_p3, "tmp_6_fu_297_p3");
    sc_trace(mVcdFile, tmp_12_fu_315_p3, "tmp_12_fu_315_p3");
    sc_trace(mVcdFile, exitcond4_fu_353_p2, "exitcond4_fu_353_p2");
    sc_trace(mVcdFile, y_s_fu_367_p2, "y_s_fu_367_p2");
    sc_trace(mVcdFile, x_mid2_fu_359_p3, "x_mid2_fu_359_p3");
    sc_trace(mVcdFile, tmp_7_fu_381_p2, "tmp_7_fu_381_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_condition_906, "ap_condition_906");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_return, "ap_return");
#endif

    }
    mHdltvinHandle.open("DMA_Read_addr.hdltvin.dat");
    mHdltvoutHandle.open("DMA_Read_addr.hdltvout.dat");
}

DMA_Read_addr::~DMA_Read_addr() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete DMA_Read_addr_AXILiteS_s_axi_U;
    delete DMA_Read_addr_in_r_m_axi_U;
}

void DMA_Read_addr::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void DMA_Read_addr::thread_ap_var_for_const7() {
    ap_var_for_const7 = ap_const_logic_0;
}

void DMA_Read_addr::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_0;
}

void DMA_Read_addr::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv1_0;
}

void DMA_Read_addr::thread_ap_var_for_const5() {
    ap_var_for_const5 = ap_const_lv2_0;
}

void DMA_Read_addr::thread_ap_var_for_const3() {
    ap_var_for_const3 = ap_const_lv32_75300;
}

void DMA_Read_addr::thread_ap_var_for_const4() {
    ap_var_for_const4 = ap_const_lv3_0;
}

void DMA_Read_addr::thread_ap_var_for_const6() {
    ap_var_for_const6 = ap_const_lv4_0;
}

void DMA_Read_addr::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(in_r_RVALID.read(), ap_const_logic_0)) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read()))) && 
             !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_341_p2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
             !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(in_r_RVALID.read(), ap_const_logic_0)) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read()))) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_341_p2.read()))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_1;
        } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read())) || 
                    (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
                     !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(in_r_RVALID.read(), ap_const_logic_0)) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read()))) && 
                     !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_341_p2.read())))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (!((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(in_r_RVALID.read(), ap_const_logic_0)) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read())))) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read()))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_reg_ioackin_in_r_ARREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read())) {
            if (!esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_in_r_ARREADY.read())) {
                ap_reg_ioackin_in_r_ARREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, in_r_ARREADY.read())) {
                ap_reg_ioackin_in_r_ARREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(in_r_RVALID.read(), ap_const_logic_0)) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read()))) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_341_p2.read()))) {
        indvar_flatten_reg_180 = indvar_flatten_next_fu_347_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read()))) {
        indvar_flatten_reg_180 = ap_const_lv19_0;
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outs_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outs_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outs_V_data_V_1_vld_out.read()))) {
            outs_V_data_V_1_sel_rd =  (sc_logic) (~outs_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outs_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outs_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outs_V_data_V_1_ack_in.read()))) {
            outs_V_data_V_1_sel_wr =  (sc_logic) (~outs_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outs_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outs_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(outs_V_data_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(outs_V_data_V_1_state.read(), ap_const_lv2_2)))) {
            outs_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outs_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(outs_V_data_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(outs_V_data_V_1_state.read(), ap_const_lv2_1)))) {
            outs_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outs_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(outs_V_data_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outs_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(outs_V_data_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(outs_V_data_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outs_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outs_V_data_V_1_ack_out.read()))))) {
            outs_V_data_V_1_state = ap_const_lv2_3;
        } else {
            outs_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outs_V_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outs_V_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outs_V_dest_V_1_vld_out.read()))) {
            outs_V_dest_V_1_sel_rd =  (sc_logic) (~outs_V_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outs_V_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outs_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outs_V_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outs_V_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outs_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outs_V_dest_V_1_state.read())))) {
            outs_V_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outs_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outs_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outs_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outs_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outs_V_dest_V_1_state.read())))) {
            outs_V_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outs_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outs_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outs_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outs_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outs_V_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outs_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outs_V_dest_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outs_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outs_V_dest_V_1_ack_out.read()))))) {
            outs_V_dest_V_1_state = ap_const_lv2_3;
        } else {
            outs_V_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outs_V_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outs_V_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outs_V_id_V_1_vld_out.read()))) {
            outs_V_id_V_1_sel_rd =  (sc_logic) (~outs_V_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outs_V_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outs_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outs_V_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outs_V_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outs_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outs_V_id_V_1_state.read())))) {
            outs_V_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outs_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outs_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outs_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outs_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outs_V_id_V_1_state.read())))) {
            outs_V_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outs_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outs_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outs_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outs_V_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outs_V_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outs_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outs_V_id_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outs_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outs_V_id_V_1_ack_out.read()))))) {
            outs_V_id_V_1_state = ap_const_lv2_3;
        } else {
            outs_V_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outs_V_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outs_V_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outs_V_keep_V_1_vld_out.read()))) {
            outs_V_keep_V_1_sel_rd =  (sc_logic) (~outs_V_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outs_V_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outs_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outs_V_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outs_V_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outs_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outs_V_keep_V_1_state.read())))) {
            outs_V_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outs_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outs_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outs_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outs_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outs_V_keep_V_1_state.read())))) {
            outs_V_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outs_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outs_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outs_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outs_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outs_V_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outs_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outs_V_keep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outs_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outs_V_keep_V_1_ack_out.read()))))) {
            outs_V_keep_V_1_state = ap_const_lv2_3;
        } else {
            outs_V_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outs_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outs_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outs_V_last_V_1_vld_out.read()))) {
            outs_V_last_V_1_sel_rd =  (sc_logic) (~outs_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outs_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outs_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outs_V_last_V_1_ack_in.read()))) {
            outs_V_last_V_1_sel_wr =  (sc_logic) (~outs_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outs_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outs_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outs_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outs_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outs_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outs_V_last_V_1_state.read())))) {
            outs_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outs_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outs_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outs_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outs_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outs_V_last_V_1_state.read())))) {
            outs_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outs_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outs_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outs_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outs_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outs_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outs_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outs_V_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outs_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outs_V_last_V_1_ack_out.read()))))) {
            outs_V_last_V_1_state = ap_const_lv2_3;
        } else {
            outs_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outs_V_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outs_V_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outs_V_strb_V_1_vld_out.read()))) {
            outs_V_strb_V_1_sel_rd =  (sc_logic) (~outs_V_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outs_V_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outs_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outs_V_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outs_V_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outs_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outs_V_strb_V_1_state.read())))) {
            outs_V_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outs_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outs_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outs_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outs_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outs_V_strb_V_1_state.read())))) {
            outs_V_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outs_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outs_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outs_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outs_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outs_V_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outs_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outs_V_strb_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outs_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outs_V_strb_V_1_ack_out.read()))))) {
            outs_V_strb_V_1_state = ap_const_lv2_3;
        } else {
            outs_V_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outs_V_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outs_V_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outs_V_user_V_1_vld_out.read()))) {
            outs_V_user_V_1_sel_rd =  (sc_logic) (~outs_V_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outs_V_user_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outs_V_user_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outs_V_user_V_1_ack_in.read()))) {
            outs_V_user_V_1_sel_wr =  (sc_logic) (~outs_V_user_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outs_V_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, outs_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outs_V_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, outs_V_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, outs_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, outs_V_user_V_1_state.read())))) {
            outs_V_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outs_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, outs_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outs_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outs_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outs_V_user_V_1_state.read())))) {
            outs_V_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, outs_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, outs_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, outs_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outs_V_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outs_V_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, outs_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, outs_V_user_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outs_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outs_V_user_V_1_ack_out.read()))))) {
            outs_V_user_V_1_state = ap_const_lv2_3;
        } else {
            outs_V_user_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(in_r_RVALID.read(), ap_const_logic_0)) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read()))) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_341_p2.read()))) {
        x_reg_202 = x_1_fu_399_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read()))) {
        x_reg_202 = ap_const_lv10_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(in_r_RVALID.read(), ap_const_logic_0)) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read()))))) {
        y_reg_191 = tmp_3_cast8_mid2_v_v_1_reg_435.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read()))) {
        y_reg_191 = ap_const_lv10_0;
    }
    if (((!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1)) && 
  esl_seteq<1,1,1>(ap_const_logic_0, active_frame_V_0_vld_reg.read())) || (!(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1)) && 
  esl_seteq<1,1,1>(ap_const_logic_1, active_frame_V_0_vld_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, active_frame_V_0_ack_out.read())))) {
        active_frame_V_0_data_reg = active_frame_V.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(in_r_RVALID.read(), ap_const_logic_0)) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read()))))) {
        ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426 = exitcond_flatten_reg_426.read();
        exitcond_flatten_reg_426 = exitcond_flatten_fu_341_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        n = storemerge_fu_239_p3.read();
        p_v_reg_415 = p_v_fu_323_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outs_V_data_V_1_load_A.read())) {
        outs_V_data_V_1_payload_A = in_r_RDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outs_V_data_V_1_load_B.read())) {
        outs_V_data_V_1_payload_B = in_r_RDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outs_V_last_V_1_load_A.read())) {
        outs_V_last_V_1_payload_A = pix_last_V_reg_445.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outs_V_last_V_1_load_B.read())) {
        outs_V_last_V_1_payload_B = pix_last_V_reg_445.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outs_V_user_V_1_load_A.read())) {
        outs_V_user_V_1_payload_A = pix_user_V_reg_440.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outs_V_user_V_1_load_B.read())) {
        outs_V_user_V_1_payload_B = pix_user_V_reg_440.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(in_r_RVALID.read(), ap_const_logic_0)) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read()))) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_341_p2.read()))) {
        pix_last_V_reg_445 = pix_last_V_fu_393_p2.read();
        pix_user_V_reg_440 = pix_user_V_fu_387_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        tmp_1_reg_410 = tmp_1_fu_223_p2.read();
        tmp_reg_405 = tmp_fu_217_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(in_r_RVALID.read(), ap_const_logic_0)) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read()))) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_341_p2.read()))) {
        tmp_3_cast8_mid2_v_v_1_reg_435 = tmp_3_cast8_mid2_v_v_1_fu_373_p3.read();
    }
}

void DMA_Read_addr::thread_active_frame_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read()) && 
         !esl_seteq<1,1,1>(ap_condition_906.read(), ap_const_boolean_1))) {
        active_frame_V_0_ack_out = ap_const_logic_1;
    } else {
        active_frame_V_0_ack_out = ap_const_logic_0;
    }
}

void DMA_Read_addr::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read().range(9, 9);
}

void DMA_Read_addr::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void DMA_Read_addr::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read().range(10, 10);
}

void DMA_Read_addr::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read().range(1, 1);
}

void DMA_Read_addr::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read().range(2, 2);
}

void DMA_Read_addr::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read().range(8, 8);
}

void DMA_Read_addr::thread_ap_condition_906() {
    ap_condition_906 = (esl_seteq<1,1,1>(outs_V_data_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outs_V_keep_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outs_V_strb_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outs_V_user_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outs_V_last_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outs_V_id_V_1_ack_in.read(), ap_const_logic_0) || esl_seteq<1,1,1>(outs_V_dest_V_1_ack_in.read(), ap_const_logic_0));
}

void DMA_Read_addr::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read()) && 
         !esl_seteq<1,1,1>(ap_condition_906.read(), ap_const_boolean_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void DMA_Read_addr::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void DMA_Read_addr::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read()) && 
         !esl_seteq<1,1,1>(ap_condition_906.read(), ap_const_boolean_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void DMA_Read_addr::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void DMA_Read_addr::thread_ap_sig_ioackin_in_r_ARREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_in_r_ARREADY.read())) {
        ap_sig_ioackin_in_r_ARREADY = in_r_ARREADY.read();
    } else {
        ap_sig_ioackin_in_r_ARREADY = ap_const_logic_1;
    }
}

void DMA_Read_addr::thread_exitcond4_fu_353_p2() {
    exitcond4_fu_353_p2 = (!x_reg_202.read().is_01() || !ap_const_lv10_320.is_01())? sc_lv<1>(): sc_lv<1>(x_reg_202.read() == ap_const_lv10_320);
}

void DMA_Read_addr::thread_exitcond_flatten_fu_341_p2() {
    exitcond_flatten_fu_341_p2 = (!indvar_flatten_reg_180.read().is_01() || !ap_const_lv19_75300.is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_180.read() == ap_const_lv19_75300);
}

void DMA_Read_addr::thread_in_r_ARVALID() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_in_r_ARREADY.read()))) {
        in_r_ARVALID = ap_const_logic_1;
    } else {
        in_r_ARVALID = ap_const_logic_0;
    }
}

void DMA_Read_addr::thread_in_r_RREADY() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(in_r_RVALID.read(), ap_const_logic_0)) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read()))))) {
        in_r_RREADY = ap_const_logic_1;
    } else {
        in_r_RREADY = ap_const_logic_0;
    }
}

void DMA_Read_addr::thread_in_r_blk_n_AR() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        in_r_blk_n_AR = m_axi_in_r_ARREADY.read();
    } else {
        in_r_blk_n_AR = ap_const_logic_1;
    }
}

void DMA_Read_addr::thread_in_r_blk_n_R() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()))) {
        in_r_blk_n_R = m_axi_in_r_RVALID.read();
    } else {
        in_r_blk_n_R = ap_const_logic_1;
    }
}

void DMA_Read_addr::thread_indvar_flatten_next_fu_347_p2() {
    indvar_flatten_next_fu_347_p2 = (!indvar_flatten_reg_180.read().is_01() || !ap_const_lv19_1.is_01())? sc_lv<19>(): (sc_biguint<19>(indvar_flatten_reg_180.read()) + sc_biguint<19>(ap_const_lv19_1));
}

void DMA_Read_addr::thread_or_cond_fu_271_p2() {
    or_cond_fu_271_p2 = (tmp_s_fu_265_p2.read() | tmp_9_fu_259_p2.read());
}

void DMA_Read_addr::thread_outs_TDATA() {
    outs_TDATA = outs_V_data_V_1_data_out.read();
}

void DMA_Read_addr::thread_outs_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426.read())))) {
        outs_TDATA_blk_n =  (sc_logic) (outs_V_data_V_1_state.read()[1]);
    } else {
        outs_TDATA_blk_n = ap_const_logic_1;
    }
}

void DMA_Read_addr::thread_outs_TDEST() {
    outs_TDEST = outs_V_dest_V_1_data_out.read();
}

void DMA_Read_addr::thread_outs_TID() {
    outs_TID = outs_V_id_V_1_data_out.read();
}

void DMA_Read_addr::thread_outs_TKEEP() {
    outs_TKEEP = outs_V_keep_V_1_data_out.read();
}

void DMA_Read_addr::thread_outs_TLAST() {
    outs_TLAST = outs_V_last_V_1_data_out.read();
}

void DMA_Read_addr::thread_outs_TSTRB() {
    outs_TSTRB = outs_V_strb_V_1_data_out.read();
}

void DMA_Read_addr::thread_outs_TUSER() {
    outs_TUSER = outs_V_user_V_1_data_out.read();
}

void DMA_Read_addr::thread_outs_TVALID() {
    outs_TVALID =  (sc_logic) (outs_V_dest_V_1_state.read()[0]);
}

void DMA_Read_addr::thread_outs_V_data_V_1_ack_in() {
    outs_V_data_V_1_ack_in =  (sc_logic) (outs_V_data_V_1_state.read()[1]);
}

void DMA_Read_addr::thread_outs_V_data_V_1_ack_out() {
    outs_V_data_V_1_ack_out = outs_TREADY.read();
}

void DMA_Read_addr::thread_outs_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outs_V_data_V_1_sel.read())) {
        outs_V_data_V_1_data_out = outs_V_data_V_1_payload_B.read();
    } else {
        outs_V_data_V_1_data_out = outs_V_data_V_1_payload_A.read();
    }
}

void DMA_Read_addr::thread_outs_V_data_V_1_load_A() {
    outs_V_data_V_1_load_A = (outs_V_data_V_1_state_cmp_full.read() & ~outs_V_data_V_1_sel_wr.read());
}

void DMA_Read_addr::thread_outs_V_data_V_1_load_B() {
    outs_V_data_V_1_load_B = (outs_V_data_V_1_sel_wr.read() & outs_V_data_V_1_state_cmp_full.read());
}

void DMA_Read_addr::thread_outs_V_data_V_1_sel() {
    outs_V_data_V_1_sel = outs_V_data_V_1_sel_rd.read();
}

void DMA_Read_addr::thread_outs_V_data_V_1_state_cmp_full() {
    outs_V_data_V_1_state_cmp_full =  (sc_logic) ((!outs_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outs_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void DMA_Read_addr::thread_outs_V_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(in_r_RVALID.read(), ap_const_logic_0)) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read()))))) {
        outs_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        outs_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void DMA_Read_addr::thread_outs_V_data_V_1_vld_out() {
    outs_V_data_V_1_vld_out =  (sc_logic) (outs_V_data_V_1_state.read()[0]);
}

void DMA_Read_addr::thread_outs_V_dest_V_1_ack_in() {
    outs_V_dest_V_1_ack_in =  (sc_logic) (outs_V_dest_V_1_state.read()[1]);
}

void DMA_Read_addr::thread_outs_V_dest_V_1_ack_out() {
    outs_V_dest_V_1_ack_out = outs_TREADY.read();
}

void DMA_Read_addr::thread_outs_V_dest_V_1_data_out() {
    outs_V_dest_V_1_data_out = ap_const_lv1_0;
}

void DMA_Read_addr::thread_outs_V_dest_V_1_sel() {
    outs_V_dest_V_1_sel = outs_V_dest_V_1_sel_rd.read();
}

void DMA_Read_addr::thread_outs_V_dest_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(in_r_RVALID.read(), ap_const_logic_0)) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read()))))) {
        outs_V_dest_V_1_vld_in = ap_const_logic_1;
    } else {
        outs_V_dest_V_1_vld_in = ap_const_logic_0;
    }
}

void DMA_Read_addr::thread_outs_V_dest_V_1_vld_out() {
    outs_V_dest_V_1_vld_out =  (sc_logic) (outs_V_dest_V_1_state.read()[0]);
}

void DMA_Read_addr::thread_outs_V_id_V_1_ack_in() {
    outs_V_id_V_1_ack_in =  (sc_logic) (outs_V_id_V_1_state.read()[1]);
}

void DMA_Read_addr::thread_outs_V_id_V_1_ack_out() {
    outs_V_id_V_1_ack_out = outs_TREADY.read();
}

void DMA_Read_addr::thread_outs_V_id_V_1_data_out() {
    outs_V_id_V_1_data_out = ap_const_lv1_0;
}

void DMA_Read_addr::thread_outs_V_id_V_1_sel() {
    outs_V_id_V_1_sel = outs_V_id_V_1_sel_rd.read();
}

void DMA_Read_addr::thread_outs_V_id_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(in_r_RVALID.read(), ap_const_logic_0)) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read()))))) {
        outs_V_id_V_1_vld_in = ap_const_logic_1;
    } else {
        outs_V_id_V_1_vld_in = ap_const_logic_0;
    }
}

void DMA_Read_addr::thread_outs_V_id_V_1_vld_out() {
    outs_V_id_V_1_vld_out =  (sc_logic) (outs_V_id_V_1_state.read()[0]);
}

void DMA_Read_addr::thread_outs_V_keep_V_1_ack_in() {
    outs_V_keep_V_1_ack_in =  (sc_logic) (outs_V_keep_V_1_state.read()[1]);
}

void DMA_Read_addr::thread_outs_V_keep_V_1_ack_out() {
    outs_V_keep_V_1_ack_out = outs_TREADY.read();
}

void DMA_Read_addr::thread_outs_V_keep_V_1_data_out() {
    outs_V_keep_V_1_data_out = ap_const_lv4_0;
}

void DMA_Read_addr::thread_outs_V_keep_V_1_sel() {
    outs_V_keep_V_1_sel = outs_V_keep_V_1_sel_rd.read();
}

void DMA_Read_addr::thread_outs_V_keep_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(in_r_RVALID.read(), ap_const_logic_0)) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read()))))) {
        outs_V_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        outs_V_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void DMA_Read_addr::thread_outs_V_keep_V_1_vld_out() {
    outs_V_keep_V_1_vld_out =  (sc_logic) (outs_V_keep_V_1_state.read()[0]);
}

void DMA_Read_addr::thread_outs_V_last_V_1_ack_in() {
    outs_V_last_V_1_ack_in =  (sc_logic) (outs_V_last_V_1_state.read()[1]);
}

void DMA_Read_addr::thread_outs_V_last_V_1_ack_out() {
    outs_V_last_V_1_ack_out = outs_TREADY.read();
}

void DMA_Read_addr::thread_outs_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outs_V_last_V_1_sel.read())) {
        outs_V_last_V_1_data_out = outs_V_last_V_1_payload_B.read();
    } else {
        outs_V_last_V_1_data_out = outs_V_last_V_1_payload_A.read();
    }
}

void DMA_Read_addr::thread_outs_V_last_V_1_load_A() {
    outs_V_last_V_1_load_A = (outs_V_last_V_1_state_cmp_full.read() & ~outs_V_last_V_1_sel_wr.read());
}

void DMA_Read_addr::thread_outs_V_last_V_1_load_B() {
    outs_V_last_V_1_load_B = (outs_V_last_V_1_sel_wr.read() & outs_V_last_V_1_state_cmp_full.read());
}

void DMA_Read_addr::thread_outs_V_last_V_1_sel() {
    outs_V_last_V_1_sel = outs_V_last_V_1_sel_rd.read();
}

void DMA_Read_addr::thread_outs_V_last_V_1_state_cmp_full() {
    outs_V_last_V_1_state_cmp_full =  (sc_logic) ((!outs_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outs_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void DMA_Read_addr::thread_outs_V_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(in_r_RVALID.read(), ap_const_logic_0)) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read()))))) {
        outs_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        outs_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void DMA_Read_addr::thread_outs_V_last_V_1_vld_out() {
    outs_V_last_V_1_vld_out =  (sc_logic) (outs_V_last_V_1_state.read()[0]);
}

void DMA_Read_addr::thread_outs_V_strb_V_1_ack_in() {
    outs_V_strb_V_1_ack_in =  (sc_logic) (outs_V_strb_V_1_state.read()[1]);
}

void DMA_Read_addr::thread_outs_V_strb_V_1_ack_out() {
    outs_V_strb_V_1_ack_out = outs_TREADY.read();
}

void DMA_Read_addr::thread_outs_V_strb_V_1_data_out() {
    outs_V_strb_V_1_data_out = ap_const_lv4_0;
}

void DMA_Read_addr::thread_outs_V_strb_V_1_sel() {
    outs_V_strb_V_1_sel = outs_V_strb_V_1_sel_rd.read();
}

void DMA_Read_addr::thread_outs_V_strb_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(in_r_RVALID.read(), ap_const_logic_0)) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read()))))) {
        outs_V_strb_V_1_vld_in = ap_const_logic_1;
    } else {
        outs_V_strb_V_1_vld_in = ap_const_logic_0;
    }
}

void DMA_Read_addr::thread_outs_V_strb_V_1_vld_out() {
    outs_V_strb_V_1_vld_out =  (sc_logic) (outs_V_strb_V_1_state.read()[0]);
}

void DMA_Read_addr::thread_outs_V_user_V_1_ack_in() {
    outs_V_user_V_1_ack_in =  (sc_logic) (outs_V_user_V_1_state.read()[1]);
}

void DMA_Read_addr::thread_outs_V_user_V_1_ack_out() {
    outs_V_user_V_1_ack_out = outs_TREADY.read();
}

void DMA_Read_addr::thread_outs_V_user_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outs_V_user_V_1_sel.read())) {
        outs_V_user_V_1_data_out = outs_V_user_V_1_payload_B.read();
    } else {
        outs_V_user_V_1_data_out = outs_V_user_V_1_payload_A.read();
    }
}

void DMA_Read_addr::thread_outs_V_user_V_1_load_A() {
    outs_V_user_V_1_load_A = (outs_V_user_V_1_state_cmp_full.read() & ~outs_V_user_V_1_sel_wr.read());
}

void DMA_Read_addr::thread_outs_V_user_V_1_load_B() {
    outs_V_user_V_1_load_B = (outs_V_user_V_1_sel_wr.read() & outs_V_user_V_1_state_cmp_full.read());
}

void DMA_Read_addr::thread_outs_V_user_V_1_sel() {
    outs_V_user_V_1_sel = outs_V_user_V_1_sel_rd.read();
}

void DMA_Read_addr::thread_outs_V_user_V_1_state_cmp_full() {
    outs_V_user_V_1_state_cmp_full =  (sc_logic) ((!outs_V_user_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outs_V_user_V_1_state.read() != ap_const_lv2_1))[0];
}

void DMA_Read_addr::thread_outs_V_user_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
         !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(in_r_RVALID.read(), ap_const_logic_0)) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read()))))) {
        outs_V_user_V_1_vld_in = ap_const_logic_1;
    } else {
        outs_V_user_V_1_vld_in = ap_const_logic_0;
    }
}

void DMA_Read_addr::thread_outs_V_user_V_1_vld_out() {
    outs_V_user_V_1_vld_out =  (sc_logic) (outs_V_user_V_1_state.read()[0]);
}

void DMA_Read_addr::thread_p_s_fu_229_p3() {
    p_s_fu_229_p3 = (!tmp_1_reg_410.read()[0].is_01())? sc_lv<32>(): ((tmp_1_reg_410.read()[0].to_bool())? ap_const_lv32_0: tmp_reg_405.read());
}

void DMA_Read_addr::thread_p_v_fu_323_p3() {
    p_v_fu_323_p3 = (!or_cond_fu_271_p2.read()[0].is_01())? sc_lv<30>(): ((or_cond_fu_271_p2.read()[0].to_bool())? tmp_6_fu_297_p3.read(): tmp_12_fu_315_p3.read());
}

void DMA_Read_addr::thread_pix_last_V_fu_393_p2() {
    pix_last_V_fu_393_p2 = (!x_mid2_fu_359_p3.read().is_01() || !ap_const_lv10_31F.is_01())? sc_lv<1>(): sc_lv<1>(x_mid2_fu_359_p3.read() == ap_const_lv10_31F);
}

void DMA_Read_addr::thread_pix_user_V_fu_387_p2() {
    pix_user_V_fu_387_p2 = (!tmp_7_fu_381_p2.read().is_01() || !ap_const_lv10_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_7_fu_381_p2.read() == ap_const_lv10_0);
}

void DMA_Read_addr::thread_storemerge_fu_239_p3() {
    storemerge_fu_239_p3 = (!mode_V.read()[0].is_01())? sc_lv<32>(): ((mode_V.read()[0].to_bool())? p_s_fu_229_p3.read(): tmp_2_fu_235_p1.read());
}

void DMA_Read_addr::thread_tmp_10_fu_331_p1() {
    tmp_10_fu_331_p1 = esl_zext<32,30>(p_v_reg_415.read());
}

void DMA_Read_addr::thread_tmp_12_fu_315_p3() {
    tmp_12_fu_315_p3 = (!tmp_4_fu_253_p2.read()[0].is_01())? sc_lv<30>(): ((tmp_4_fu_253_p2.read()[0].to_bool())? tmp_8_fu_305_p4.read(): tmp_5_fu_287_p4.read());
}

void DMA_Read_addr::thread_tmp_1_fu_223_p2() {
    tmp_1_fu_223_p2 = (!tmp_fu_217_p2.read().is_01() || !ap_const_lv32_2.is_01())? sc_lv<1>(): (sc_bigint<32>(tmp_fu_217_p2.read()) > sc_bigint<32>(ap_const_lv32_2));
}

void DMA_Read_addr::thread_tmp_2_fu_235_p1() {
    tmp_2_fu_235_p1 = esl_zext<32,2>(active_frame_V_0_data_reg.read());
}

void DMA_Read_addr::thread_tmp_3_cast8_mid2_v_v_1_fu_373_p3() {
    tmp_3_cast8_mid2_v_v_1_fu_373_p3 = (!exitcond4_fu_353_p2.read()[0].is_01())? sc_lv<10>(): ((exitcond4_fu_353_p2.read()[0].to_bool())? y_s_fu_367_p2.read(): y_phi_fu_195_p4.read());
}

void DMA_Read_addr::thread_tmp_3_fu_277_p4() {
    tmp_3_fu_277_p4 = frame_buffer1.read().range(31, 2);
}

void DMA_Read_addr::thread_tmp_4_fu_253_p2() {
    tmp_4_fu_253_p2 = (!storemerge_fu_239_p3.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(storemerge_fu_239_p3.read() == ap_const_lv32_0);
}

void DMA_Read_addr::thread_tmp_5_fu_287_p4() {
    tmp_5_fu_287_p4 = frame_buffer0.read().range(31, 2);
}

void DMA_Read_addr::thread_tmp_6_fu_297_p3() {
    tmp_6_fu_297_p3 = (!tmp_s_fu_265_p2.read()[0].is_01())? sc_lv<30>(): ((tmp_s_fu_265_p2.read()[0].to_bool())? tmp_3_fu_277_p4.read(): tmp_5_fu_287_p4.read());
}

void DMA_Read_addr::thread_tmp_7_fu_381_p2() {
    tmp_7_fu_381_p2 = (x_mid2_fu_359_p3.read() | tmp_3_cast8_mid2_v_v_1_fu_373_p3.read());
}

void DMA_Read_addr::thread_tmp_8_fu_305_p4() {
    tmp_8_fu_305_p4 = frame_buffer2.read().range(31, 2);
}

void DMA_Read_addr::thread_tmp_9_fu_259_p2() {
    tmp_9_fu_259_p2 = (!storemerge_fu_239_p3.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<1>(): sc_lv<1>(storemerge_fu_239_p3.read() == ap_const_lv32_1);
}

void DMA_Read_addr::thread_tmp_fu_217_p2() {
    tmp_fu_217_p2 = (!n.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(n.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void DMA_Read_addr::thread_tmp_s_fu_265_p2() {
    tmp_s_fu_265_p2 = (!storemerge_fu_239_p3.read().is_01() || !ap_const_lv32_2.is_01())? sc_lv<1>(): sc_lv<1>(storemerge_fu_239_p3.read() == ap_const_lv32_2);
}

void DMA_Read_addr::thread_x_1_fu_399_p2() {
    x_1_fu_399_p2 = (!x_mid2_fu_359_p3.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(x_mid2_fu_359_p3.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void DMA_Read_addr::thread_x_mid2_fu_359_p3() {
    x_mid2_fu_359_p3 = (!exitcond4_fu_353_p2.read()[0].is_01())? sc_lv<10>(): ((exitcond4_fu_353_p2.read()[0].to_bool())? ap_const_lv10_0: x_reg_202.read());
}

void DMA_Read_addr::thread_y_phi_fu_195_p4() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()))) {
        y_phi_fu_195_p4 = tmp_3_cast8_mid2_v_v_1_reg_435.read();
    } else {
        y_phi_fu_195_p4 = y_reg_191.read();
    }
}

void DMA_Read_addr::thread_y_s_fu_367_p2() {
    y_s_fu_367_p2 = (!y_phi_fu_195_p4.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(y_phi_fu_195_p4.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void DMA_Read_addr::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_in_r_ARREADY.read())) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 512 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(in_r_RVALID.read(), ap_const_logic_0)) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read()))) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) && !(!((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(in_r_RVALID.read(), ap_const_logic_0)) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read()))) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_341_p2.read()) && !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  !((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(in_r_RVALID.read(), ap_const_logic_0)) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read()))) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || (!((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(in_r_RVALID.read(), ap_const_logic_0)) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_426.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read())))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, outs_V_data_V_1_ack_in.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  !esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_341_p2.read()) && 
  !esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())))) {
                ap_NS_fsm = ap_ST_fsm_state13;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 1024 : 
            if (!esl_seteq<1,1,1>(ap_condition_906.read(), ap_const_boolean_1)) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXX";
            break;
    }
}

void DMA_Read_addr::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"m_axi_in_r_AWVALID\" :  \"" << m_axi_in_r_AWVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_in_r_AWREADY\" :  \"" << m_axi_in_r_AWREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_in_r_AWADDR\" :  \"" << m_axi_in_r_AWADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_in_r_AWID\" :  \"" << m_axi_in_r_AWID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_in_r_AWLEN\" :  \"" << m_axi_in_r_AWLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_in_r_AWSIZE\" :  \"" << m_axi_in_r_AWSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_in_r_AWBURST\" :  \"" << m_axi_in_r_AWBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_in_r_AWLOCK\" :  \"" << m_axi_in_r_AWLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_in_r_AWCACHE\" :  \"" << m_axi_in_r_AWCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_in_r_AWPROT\" :  \"" << m_axi_in_r_AWPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_in_r_AWQOS\" :  \"" << m_axi_in_r_AWQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_in_r_AWREGION\" :  \"" << m_axi_in_r_AWREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_in_r_AWUSER\" :  \"" << m_axi_in_r_AWUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_in_r_WVALID\" :  \"" << m_axi_in_r_WVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_in_r_WREADY\" :  \"" << m_axi_in_r_WREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_in_r_WDATA\" :  \"" << m_axi_in_r_WDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_in_r_WSTRB\" :  \"" << m_axi_in_r_WSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_in_r_WLAST\" :  \"" << m_axi_in_r_WLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_in_r_WID\" :  \"" << m_axi_in_r_WID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_in_r_WUSER\" :  \"" << m_axi_in_r_WUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_in_r_ARVALID\" :  \"" << m_axi_in_r_ARVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_in_r_ARREADY\" :  \"" << m_axi_in_r_ARREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_in_r_ARADDR\" :  \"" << m_axi_in_r_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_in_r_ARID\" :  \"" << m_axi_in_r_ARID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_in_r_ARLEN\" :  \"" << m_axi_in_r_ARLEN.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_in_r_ARSIZE\" :  \"" << m_axi_in_r_ARSIZE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_in_r_ARBURST\" :  \"" << m_axi_in_r_ARBURST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_in_r_ARLOCK\" :  \"" << m_axi_in_r_ARLOCK.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_in_r_ARCACHE\" :  \"" << m_axi_in_r_ARCACHE.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_in_r_ARPROT\" :  \"" << m_axi_in_r_ARPROT.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_in_r_ARQOS\" :  \"" << m_axi_in_r_ARQOS.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_in_r_ARREGION\" :  \"" << m_axi_in_r_ARREGION.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_in_r_ARUSER\" :  \"" << m_axi_in_r_ARUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_in_r_RVALID\" :  \"" << m_axi_in_r_RVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_in_r_RREADY\" :  \"" << m_axi_in_r_RREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_in_r_RDATA\" :  \"" << m_axi_in_r_RDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_in_r_RLAST\" :  \"" << m_axi_in_r_RLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_in_r_RID\" :  \"" << m_axi_in_r_RID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_in_r_RUSER\" :  \"" << m_axi_in_r_RUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_in_r_RRESP\" :  \"" << m_axi_in_r_RRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_in_r_BVALID\" :  \"" << m_axi_in_r_BVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"m_axi_in_r_BREADY\" :  \"" << m_axi_in_r_BREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_in_r_BRESP\" :  \"" << m_axi_in_r_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_in_r_BID\" :  \"" << m_axi_in_r_BID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"m_axi_in_r_BUSER\" :  \"" << m_axi_in_r_BUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outs_TDATA\" :  \"" << outs_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outs_TVALID\" :  \"" << outs_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"outs_TREADY\" :  \"" << outs_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outs_TKEEP\" :  \"" << outs_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outs_TSTRB\" :  \"" << outs_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outs_TUSER\" :  \"" << outs_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outs_TLAST\" :  \"" << outs_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outs_TID\" :  \"" << outs_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outs_TDEST\" :  \"" << outs_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"active_frame_V\" :  \"" << active_frame_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}


-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DMA_Read_addr is
generic (
    C_M_AXI_IN_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_IN_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IN_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IN_R_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IN_R_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_IN_R_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_IN_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_IN_R_PROT_VALUE : INTEGER := 0 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_in_r_AWVALID : OUT STD_LOGIC;
    m_axi_in_r_AWREADY : IN STD_LOGIC;
    m_axi_in_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ADDR_WIDTH-1 downto 0);
    m_axi_in_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_in_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_in_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_AWUSER_WIDTH-1 downto 0);
    m_axi_in_r_WVALID : OUT STD_LOGIC;
    m_axi_in_r_WREADY : IN STD_LOGIC;
    m_axi_in_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_DATA_WIDTH-1 downto 0);
    m_axi_in_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_DATA_WIDTH/8-1 downto 0);
    m_axi_in_r_WLAST : OUT STD_LOGIC;
    m_axi_in_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_in_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_WUSER_WIDTH-1 downto 0);
    m_axi_in_r_ARVALID : OUT STD_LOGIC;
    m_axi_in_r_ARREADY : IN STD_LOGIC;
    m_axi_in_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ADDR_WIDTH-1 downto 0);
    m_axi_in_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_in_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_in_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_in_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_in_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IN_R_ARUSER_WIDTH-1 downto 0);
    m_axi_in_r_RVALID : IN STD_LOGIC;
    m_axi_in_r_RREADY : OUT STD_LOGIC;
    m_axi_in_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_DATA_WIDTH-1 downto 0);
    m_axi_in_r_RLAST : IN STD_LOGIC;
    m_axi_in_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_in_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_RUSER_WIDTH-1 downto 0);
    m_axi_in_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_BVALID : IN STD_LOGIC;
    m_axi_in_r_BREADY : OUT STD_LOGIC;
    m_axi_in_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_in_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_ID_WIDTH-1 downto 0);
    m_axi_in_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IN_R_BUSER_WIDTH-1 downto 0);
    outs_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    outs_TVALID : OUT STD_LOGIC;
    outs_TREADY : IN STD_LOGIC;
    outs_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    outs_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    outs_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    outs_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    outs_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    outs_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    active_frame_V : IN STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of DMA_Read_addr is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "DMA_Read_addr,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=480011,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=958,HLS_SYN_LUT=1316}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_75300 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001110101001100000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv19_75300 : STD_LOGIC_VECTOR (18 downto 0) := "1110101001100000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv10_320 : STD_LOGIC_VECTOR (9 downto 0) := "1100100000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_31F : STD_LOGIC_VECTOR (9 downto 0) := "1100011111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal outs_V_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal outs_V_data_V_1_vld_in : STD_LOGIC;
    signal outs_V_data_V_1_vld_out : STD_LOGIC;
    signal outs_V_data_V_1_ack_in : STD_LOGIC;
    signal outs_V_data_V_1_ack_out : STD_LOGIC;
    signal outs_V_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal outs_V_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal outs_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal outs_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal outs_V_data_V_1_sel : STD_LOGIC;
    signal outs_V_data_V_1_load_A : STD_LOGIC;
    signal outs_V_data_V_1_load_B : STD_LOGIC;
    signal outs_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outs_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal outs_V_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal outs_V_keep_V_1_vld_in : STD_LOGIC;
    signal outs_V_keep_V_1_vld_out : STD_LOGIC;
    signal outs_V_keep_V_1_ack_in : STD_LOGIC;
    signal outs_V_keep_V_1_ack_out : STD_LOGIC;
    signal outs_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal outs_V_keep_V_1_sel : STD_LOGIC;
    signal outs_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outs_V_strb_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal outs_V_strb_V_1_vld_in : STD_LOGIC;
    signal outs_V_strb_V_1_vld_out : STD_LOGIC;
    signal outs_V_strb_V_1_ack_in : STD_LOGIC;
    signal outs_V_strb_V_1_ack_out : STD_LOGIC;
    signal outs_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal outs_V_strb_V_1_sel : STD_LOGIC;
    signal outs_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outs_V_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal outs_V_user_V_1_vld_in : STD_LOGIC;
    signal outs_V_user_V_1_vld_out : STD_LOGIC;
    signal outs_V_user_V_1_ack_in : STD_LOGIC;
    signal outs_V_user_V_1_ack_out : STD_LOGIC;
    signal outs_V_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal outs_V_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal outs_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal outs_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal outs_V_user_V_1_sel : STD_LOGIC;
    signal outs_V_user_V_1_load_A : STD_LOGIC;
    signal outs_V_user_V_1_load_B : STD_LOGIC;
    signal outs_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outs_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal outs_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal outs_V_last_V_1_vld_in : STD_LOGIC;
    signal outs_V_last_V_1_vld_out : STD_LOGIC;
    signal outs_V_last_V_1_ack_in : STD_LOGIC;
    signal outs_V_last_V_1_ack_out : STD_LOGIC;
    signal outs_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal outs_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal outs_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal outs_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal outs_V_last_V_1_sel : STD_LOGIC;
    signal outs_V_last_V_1_load_A : STD_LOGIC;
    signal outs_V_last_V_1_load_B : STD_LOGIC;
    signal outs_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outs_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal outs_V_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal outs_V_id_V_1_vld_in : STD_LOGIC;
    signal outs_V_id_V_1_vld_out : STD_LOGIC;
    signal outs_V_id_V_1_ack_in : STD_LOGIC;
    signal outs_V_id_V_1_ack_out : STD_LOGIC;
    signal outs_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal outs_V_id_V_1_sel : STD_LOGIC;
    signal outs_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outs_V_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal outs_V_dest_V_1_vld_in : STD_LOGIC;
    signal outs_V_dest_V_1_vld_out : STD_LOGIC;
    signal outs_V_dest_V_1_ack_in : STD_LOGIC;
    signal outs_V_dest_V_1_ack_out : STD_LOGIC;
    signal outs_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal outs_V_dest_V_1_sel : STD_LOGIC;
    signal outs_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal frame_buffer0 : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_buffer1 : STD_LOGIC_VECTOR (31 downto 0);
    signal frame_buffer2 : STD_LOGIC_VECTOR (31 downto 0);
    signal active_frame_V_0_data_reg : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal active_frame_V_0_vld_reg : STD_LOGIC := '0';
    signal active_frame_V_0_ack_out : STD_LOGIC;
    signal mode_V : STD_LOGIC_VECTOR (0 downto 0);
    signal n : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal in_r_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal in_r_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal exitcond_flatten_reg_426 : STD_LOGIC_VECTOR (0 downto 0);
    signal outs_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426 : STD_LOGIC_VECTOR (0 downto 0);
    signal in_r_AWREADY : STD_LOGIC;
    signal in_r_WREADY : STD_LOGIC;
    signal in_r_ARVALID : STD_LOGIC;
    signal in_r_ARREADY : STD_LOGIC;
    signal in_r_RVALID : STD_LOGIC;
    signal in_r_RREADY : STD_LOGIC;
    signal in_r_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal in_r_RLAST : STD_LOGIC;
    signal in_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal in_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal in_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal in_r_BVALID : STD_LOGIC;
    signal in_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal in_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal in_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_180 : STD_LOGIC_VECTOR (18 downto 0);
    signal y_reg_191 : STD_LOGIC_VECTOR (9 downto 0);
    signal x_reg_202 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_217_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_405 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_410 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_v_fu_323_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_v_reg_415 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_sig_ioackin_in_r_ARREADY : STD_LOGIC;
    signal exitcond_flatten_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_347_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_3_cast8_mid2_v_v_1_fu_373_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_cast8_mid2_v_v_1_reg_435 : STD_LOGIC_VECTOR (9 downto 0);
    signal pix_user_V_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pix_user_V_reg_440 : STD_LOGIC_VECTOR (0 downto 0);
    signal pix_last_V_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pix_last_V_reg_445 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_1_fu_399_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal y_phi_fu_195_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_331_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_ioackin_in_r_ARREADY : STD_LOGIC := '0';
    signal storemerge_fu_239_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_fu_229_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_235_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_277_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_5_fu_287_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_4_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_305_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal or_cond_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_297_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_12_fu_315_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal exitcond4_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_s_fu_367_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal x_mid2_fu_359_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_381_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_condition_906 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);

    component DMA_Read_addr_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        frame_buffer0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        frame_buffer1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        frame_buffer2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        mode_V : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component DMA_Read_addr_in_r_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    DMA_Read_addr_AXILiteS_s_axi_U : component DMA_Read_addr_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_const_lv32_0,
        frame_buffer0 => frame_buffer0,
        frame_buffer1 => frame_buffer1,
        frame_buffer2 => frame_buffer2,
        mode_V => mode_V);

    DMA_Read_addr_in_r_m_axi_U : component DMA_Read_addr_in_r_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IN_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IN_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IN_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IN_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IN_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IN_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IN_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IN_R_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_IN_R_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_IN_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IN_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IN_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_in_r_AWVALID,
        AWREADY => m_axi_in_r_AWREADY,
        AWADDR => m_axi_in_r_AWADDR,
        AWID => m_axi_in_r_AWID,
        AWLEN => m_axi_in_r_AWLEN,
        AWSIZE => m_axi_in_r_AWSIZE,
        AWBURST => m_axi_in_r_AWBURST,
        AWLOCK => m_axi_in_r_AWLOCK,
        AWCACHE => m_axi_in_r_AWCACHE,
        AWPROT => m_axi_in_r_AWPROT,
        AWQOS => m_axi_in_r_AWQOS,
        AWREGION => m_axi_in_r_AWREGION,
        AWUSER => m_axi_in_r_AWUSER,
        WVALID => m_axi_in_r_WVALID,
        WREADY => m_axi_in_r_WREADY,
        WDATA => m_axi_in_r_WDATA,
        WSTRB => m_axi_in_r_WSTRB,
        WLAST => m_axi_in_r_WLAST,
        WID => m_axi_in_r_WID,
        WUSER => m_axi_in_r_WUSER,
        ARVALID => m_axi_in_r_ARVALID,
        ARREADY => m_axi_in_r_ARREADY,
        ARADDR => m_axi_in_r_ARADDR,
        ARID => m_axi_in_r_ARID,
        ARLEN => m_axi_in_r_ARLEN,
        ARSIZE => m_axi_in_r_ARSIZE,
        ARBURST => m_axi_in_r_ARBURST,
        ARLOCK => m_axi_in_r_ARLOCK,
        ARCACHE => m_axi_in_r_ARCACHE,
        ARPROT => m_axi_in_r_ARPROT,
        ARQOS => m_axi_in_r_ARQOS,
        ARREGION => m_axi_in_r_ARREGION,
        ARUSER => m_axi_in_r_ARUSER,
        RVALID => m_axi_in_r_RVALID,
        RREADY => m_axi_in_r_RREADY,
        RDATA => m_axi_in_r_RDATA,
        RLAST => m_axi_in_r_RLAST,
        RID => m_axi_in_r_RID,
        RUSER => m_axi_in_r_RUSER,
        RRESP => m_axi_in_r_RRESP,
        BVALID => m_axi_in_r_BVALID,
        BREADY => m_axi_in_r_BREADY,
        BRESP => m_axi_in_r_BRESP,
        BID => m_axi_in_r_BID,
        BUSER => m_axi_in_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => in_r_ARVALID,
        I_ARREADY => in_r_ARREADY,
        I_ARADDR => tmp_10_fu_331_p1,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_75300,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => in_r_RVALID,
        I_RREADY => in_r_RREADY,
        I_RDATA => in_r_RDATA,
        I_RID => in_r_RID,
        I_RUSER => in_r_RUSER,
        I_RRESP => in_r_RRESP,
        I_RLAST => in_r_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => in_r_AWREADY,
        I_AWADDR => ap_const_lv32_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => in_r_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => in_r_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => in_r_BRESP,
        I_BID => in_r_BID,
        I_BUSER => in_r_BUSER);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (((ap_const_lv1_0 = exitcond_flatten_reg_426) and (in_r_RVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))) and not((ap_const_lv1_0 = exitcond_flatten_fu_341_p2)))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (((ap_const_lv1_0 = exitcond_flatten_reg_426) and (in_r_RVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))) and (ap_const_lv1_0 = exitcond_flatten_fu_341_p2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                elsif ((((ap_const_lv1_1 = ap_CS_fsm_state9)) or ((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (((ap_const_lv1_0 = exitcond_flatten_reg_426) and (in_r_RVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))) and not((ap_const_lv1_0 = exitcond_flatten_fu_341_p2))))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (((ap_const_lv1_0 = exitcond_flatten_reg_426) and (in_r_RVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in))))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_in_r_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_ioackin_in_r_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_lv1_1 = ap_CS_fsm_state3)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_in_r_ARREADY))) then 
                        ap_reg_ioackin_in_r_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = in_r_ARREADY)) then 
                        ap_reg_ioackin_in_r_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    outs_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outs_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = outs_V_data_V_1_ack_out) and (ap_const_logic_1 = outs_V_data_V_1_vld_out))) then 
                                        outs_V_data_V_1_sel_rd <= not(outs_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outs_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outs_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = outs_V_data_V_1_vld_in) and (ap_const_logic_1 = outs_V_data_V_1_ack_in))) then 
                                        outs_V_data_V_1_sel_wr <= not(outs_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outs_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outs_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = outs_V_data_V_1_vld_in) and (ap_const_logic_1 = outs_V_data_V_1_ack_out) and (outs_V_data_V_1_state = ap_const_lv2_3)) or ((ap_const_logic_0 = outs_V_data_V_1_vld_in) and (outs_V_data_V_1_state = ap_const_lv2_2)))) then 
                    outs_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = outs_V_data_V_1_vld_in) and (ap_const_logic_0 = outs_V_data_V_1_ack_out) and (outs_V_data_V_1_state = ap_const_lv2_3)) or ((ap_const_logic_0 = outs_V_data_V_1_ack_out) and (outs_V_data_V_1_state = ap_const_lv2_1)))) then 
                    outs_V_data_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = outs_V_data_V_1_vld_in) and (outs_V_data_V_1_state = ap_const_lv2_2)) or ((ap_const_logic_1 = outs_V_data_V_1_ack_out) and (outs_V_data_V_1_state = ap_const_lv2_1)) or ((outs_V_data_V_1_state = ap_const_lv2_3) and not(((ap_const_logic_1 = outs_V_data_V_1_vld_in) and (ap_const_logic_0 = outs_V_data_V_1_ack_out))) and not(((ap_const_logic_0 = outs_V_data_V_1_vld_in) and (ap_const_logic_1 = outs_V_data_V_1_ack_out)))))) then 
                    outs_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    outs_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outs_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outs_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = outs_V_dest_V_1_ack_out) and (ap_const_logic_1 = outs_V_dest_V_1_vld_out))) then 
                                        outs_V_dest_V_1_sel_rd <= not(outs_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outs_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outs_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = outs_V_dest_V_1_vld_in) and (ap_const_logic_1 = outs_V_dest_V_1_ack_out) and (ap_const_lv2_3 = outs_V_dest_V_1_state)) or ((ap_const_logic_0 = outs_V_dest_V_1_vld_in) and (ap_const_lv2_2 = outs_V_dest_V_1_state)))) then 
                    outs_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = outs_V_dest_V_1_vld_in) and (ap_const_logic_0 = outs_V_dest_V_1_ack_out) and (ap_const_lv2_3 = outs_V_dest_V_1_state)) or ((ap_const_logic_0 = outs_V_dest_V_1_ack_out) and (ap_const_lv2_1 = outs_V_dest_V_1_state)))) then 
                    outs_V_dest_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = outs_V_dest_V_1_vld_in) and (ap_const_lv2_2 = outs_V_dest_V_1_state)) or ((ap_const_logic_1 = outs_V_dest_V_1_ack_out) and (ap_const_lv2_1 = outs_V_dest_V_1_state)) or ((ap_const_lv2_3 = outs_V_dest_V_1_state) and not(((ap_const_logic_1 = outs_V_dest_V_1_vld_in) and (ap_const_logic_0 = outs_V_dest_V_1_ack_out))) and not(((ap_const_logic_0 = outs_V_dest_V_1_vld_in) and (ap_const_logic_1 = outs_V_dest_V_1_ack_out)))))) then 
                    outs_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    outs_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outs_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outs_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = outs_V_id_V_1_ack_out) and (ap_const_logic_1 = outs_V_id_V_1_vld_out))) then 
                                        outs_V_id_V_1_sel_rd <= not(outs_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outs_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outs_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = outs_V_id_V_1_vld_in) and (ap_const_logic_1 = outs_V_id_V_1_ack_out) and (ap_const_lv2_3 = outs_V_id_V_1_state)) or ((ap_const_logic_0 = outs_V_id_V_1_vld_in) and (ap_const_lv2_2 = outs_V_id_V_1_state)))) then 
                    outs_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = outs_V_id_V_1_vld_in) and (ap_const_logic_0 = outs_V_id_V_1_ack_out) and (ap_const_lv2_3 = outs_V_id_V_1_state)) or ((ap_const_logic_0 = outs_V_id_V_1_ack_out) and (ap_const_lv2_1 = outs_V_id_V_1_state)))) then 
                    outs_V_id_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = outs_V_id_V_1_vld_in) and (ap_const_lv2_2 = outs_V_id_V_1_state)) or ((ap_const_logic_1 = outs_V_id_V_1_ack_out) and (ap_const_lv2_1 = outs_V_id_V_1_state)) or ((ap_const_lv2_3 = outs_V_id_V_1_state) and not(((ap_const_logic_1 = outs_V_id_V_1_vld_in) and (ap_const_logic_0 = outs_V_id_V_1_ack_out))) and not(((ap_const_logic_0 = outs_V_id_V_1_vld_in) and (ap_const_logic_1 = outs_V_id_V_1_ack_out)))))) then 
                    outs_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    outs_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outs_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outs_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = outs_V_keep_V_1_ack_out) and (ap_const_logic_1 = outs_V_keep_V_1_vld_out))) then 
                                        outs_V_keep_V_1_sel_rd <= not(outs_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outs_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outs_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = outs_V_keep_V_1_vld_in) and (ap_const_logic_1 = outs_V_keep_V_1_ack_out) and (ap_const_lv2_3 = outs_V_keep_V_1_state)) or ((ap_const_logic_0 = outs_V_keep_V_1_vld_in) and (ap_const_lv2_2 = outs_V_keep_V_1_state)))) then 
                    outs_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = outs_V_keep_V_1_vld_in) and (ap_const_logic_0 = outs_V_keep_V_1_ack_out) and (ap_const_lv2_3 = outs_V_keep_V_1_state)) or ((ap_const_logic_0 = outs_V_keep_V_1_ack_out) and (ap_const_lv2_1 = outs_V_keep_V_1_state)))) then 
                    outs_V_keep_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = outs_V_keep_V_1_vld_in) and (ap_const_lv2_2 = outs_V_keep_V_1_state)) or ((ap_const_logic_1 = outs_V_keep_V_1_ack_out) and (ap_const_lv2_1 = outs_V_keep_V_1_state)) or ((ap_const_lv2_3 = outs_V_keep_V_1_state) and not(((ap_const_logic_1 = outs_V_keep_V_1_vld_in) and (ap_const_logic_0 = outs_V_keep_V_1_ack_out))) and not(((ap_const_logic_0 = outs_V_keep_V_1_vld_in) and (ap_const_logic_1 = outs_V_keep_V_1_ack_out)))))) then 
                    outs_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    outs_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outs_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outs_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = outs_V_last_V_1_ack_out) and (ap_const_logic_1 = outs_V_last_V_1_vld_out))) then 
                                        outs_V_last_V_1_sel_rd <= not(outs_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outs_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outs_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = outs_V_last_V_1_vld_in) and (ap_const_logic_1 = outs_V_last_V_1_ack_in))) then 
                                        outs_V_last_V_1_sel_wr <= not(outs_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outs_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outs_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = outs_V_last_V_1_vld_in) and (ap_const_logic_1 = outs_V_last_V_1_ack_out) and (ap_const_lv2_3 = outs_V_last_V_1_state)) or ((ap_const_logic_0 = outs_V_last_V_1_vld_in) and (ap_const_lv2_2 = outs_V_last_V_1_state)))) then 
                    outs_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = outs_V_last_V_1_vld_in) and (ap_const_logic_0 = outs_V_last_V_1_ack_out) and (ap_const_lv2_3 = outs_V_last_V_1_state)) or ((ap_const_logic_0 = outs_V_last_V_1_ack_out) and (ap_const_lv2_1 = outs_V_last_V_1_state)))) then 
                    outs_V_last_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = outs_V_last_V_1_vld_in) and (ap_const_lv2_2 = outs_V_last_V_1_state)) or ((ap_const_logic_1 = outs_V_last_V_1_ack_out) and (ap_const_lv2_1 = outs_V_last_V_1_state)) or ((ap_const_lv2_3 = outs_V_last_V_1_state) and not(((ap_const_logic_1 = outs_V_last_V_1_vld_in) and (ap_const_logic_0 = outs_V_last_V_1_ack_out))) and not(((ap_const_logic_0 = outs_V_last_V_1_vld_in) and (ap_const_logic_1 = outs_V_last_V_1_ack_out)))))) then 
                    outs_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    outs_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outs_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outs_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = outs_V_strb_V_1_ack_out) and (ap_const_logic_1 = outs_V_strb_V_1_vld_out))) then 
                                        outs_V_strb_V_1_sel_rd <= not(outs_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outs_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outs_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = outs_V_strb_V_1_vld_in) and (ap_const_logic_1 = outs_V_strb_V_1_ack_out) and (ap_const_lv2_3 = outs_V_strb_V_1_state)) or ((ap_const_logic_0 = outs_V_strb_V_1_vld_in) and (ap_const_lv2_2 = outs_V_strb_V_1_state)))) then 
                    outs_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = outs_V_strb_V_1_vld_in) and (ap_const_logic_0 = outs_V_strb_V_1_ack_out) and (ap_const_lv2_3 = outs_V_strb_V_1_state)) or ((ap_const_logic_0 = outs_V_strb_V_1_ack_out) and (ap_const_lv2_1 = outs_V_strb_V_1_state)))) then 
                    outs_V_strb_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = outs_V_strb_V_1_vld_in) and (ap_const_lv2_2 = outs_V_strb_V_1_state)) or ((ap_const_logic_1 = outs_V_strb_V_1_ack_out) and (ap_const_lv2_1 = outs_V_strb_V_1_state)) or ((ap_const_lv2_3 = outs_V_strb_V_1_state) and not(((ap_const_logic_1 = outs_V_strb_V_1_vld_in) and (ap_const_logic_0 = outs_V_strb_V_1_ack_out))) and not(((ap_const_logic_0 = outs_V_strb_V_1_vld_in) and (ap_const_logic_1 = outs_V_strb_V_1_ack_out)))))) then 
                    outs_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    outs_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outs_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outs_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = outs_V_user_V_1_ack_out) and (ap_const_logic_1 = outs_V_user_V_1_vld_out))) then 
                                        outs_V_user_V_1_sel_rd <= not(outs_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outs_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outs_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = outs_V_user_V_1_vld_in) and (ap_const_logic_1 = outs_V_user_V_1_ack_in))) then 
                                        outs_V_user_V_1_sel_wr <= not(outs_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outs_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outs_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = outs_V_user_V_1_vld_in) and (ap_const_logic_1 = outs_V_user_V_1_ack_out) and (ap_const_lv2_3 = outs_V_user_V_1_state)) or ((ap_const_logic_0 = outs_V_user_V_1_vld_in) and (ap_const_lv2_2 = outs_V_user_V_1_state)))) then 
                    outs_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = outs_V_user_V_1_vld_in) and (ap_const_logic_0 = outs_V_user_V_1_ack_out) and (ap_const_lv2_3 = outs_V_user_V_1_state)) or ((ap_const_logic_0 = outs_V_user_V_1_ack_out) and (ap_const_lv2_1 = outs_V_user_V_1_state)))) then 
                    outs_V_user_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = outs_V_user_V_1_vld_in) and (ap_const_lv2_2 = outs_V_user_V_1_state)) or ((ap_const_logic_1 = outs_V_user_V_1_ack_out) and (ap_const_lv2_1 = outs_V_user_V_1_state)) or ((ap_const_lv2_3 = outs_V_user_V_1_state) and not(((ap_const_logic_1 = outs_V_user_V_1_vld_in) and (ap_const_logic_0 = outs_V_user_V_1_ack_out))) and not(((ap_const_logic_0 = outs_V_user_V_1_vld_in) and (ap_const_logic_1 = outs_V_user_V_1_ack_out)))))) then 
                    outs_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    outs_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    active_frame_V_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    indvar_flatten_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (((ap_const_lv1_0 = exitcond_flatten_reg_426) and (in_r_RVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_341_p2))) then 
                indvar_flatten_reg_180 <= indvar_flatten_next_fu_347_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                indvar_flatten_reg_180 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    x_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (((ap_const_lv1_0 = exitcond_flatten_reg_426) and (in_r_RVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_341_p2))) then 
                x_reg_202 <= x_1_fu_399_p2;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                x_reg_202 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    y_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond_flatten_reg_426) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (((ap_const_lv1_0 = exitcond_flatten_reg_426) and (in_r_RVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))))) then 
                y_reg_191 <= tmp_3_cast8_mid2_v_v_1_reg_435;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state9))) then 
                y_reg_191 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) and (ap_const_logic_0 = active_frame_V_0_vld_reg)) or (not(((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) and (ap_const_logic_1 = active_frame_V_0_vld_reg) and (ap_const_logic_1 = active_frame_V_0_ack_out)))) then
                active_frame_V_0_data_reg <= active_frame_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (((ap_const_lv1_0 = exitcond_flatten_reg_426) and (in_r_RVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))))) then
                ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426 <= exitcond_flatten_reg_426;
                exitcond_flatten_reg_426 <= exitcond_flatten_fu_341_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                n <= storemerge_fu_239_p3;
                p_v_reg_415 <= p_v_fu_323_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = outs_V_data_V_1_load_A)) then
                outs_V_data_V_1_payload_A <= in_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = outs_V_data_V_1_load_B)) then
                outs_V_data_V_1_payload_B <= in_r_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = outs_V_last_V_1_load_A)) then
                outs_V_last_V_1_payload_A <= pix_last_V_reg_445;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = outs_V_last_V_1_load_B)) then
                outs_V_last_V_1_payload_B <= pix_last_V_reg_445;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = outs_V_user_V_1_load_A)) then
                outs_V_user_V_1_payload_A <= pix_user_V_reg_440;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = outs_V_user_V_1_load_B)) then
                outs_V_user_V_1_payload_B <= pix_user_V_reg_440;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (((ap_const_lv1_0 = exitcond_flatten_reg_426) and (in_r_RVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))) and (ap_const_lv1_0 = exitcond_flatten_fu_341_p2))) then
                pix_last_V_reg_445 <= pix_last_V_fu_393_p2;
                pix_user_V_reg_440 <= pix_user_V_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                tmp_1_reg_410 <= tmp_1_fu_223_p2;
                tmp_reg_405 <= tmp_fu_217_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (((ap_const_lv1_0 = exitcond_flatten_reg_426) and (in_r_RVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_341_p2))) then
                tmp_3_cast8_mid2_v_v_1_reg_435 <= tmp_3_cast8_mid2_v_v_1_fu_373_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, outs_V_data_V_1_ack_in, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_426, ap_enable_reg_pp0_iter2, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426, in_r_RVALID, ap_sig_ioackin_in_r_ARREADY, exitcond_flatten_fu_341_p2, ap_enable_reg_pp0_iter0, ap_condition_906)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_in_r_ARREADY))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (((ap_const_lv1_0 = exitcond_flatten_reg_426) and (in_r_RVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) and not((not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (((ap_const_lv1_0 = exitcond_flatten_reg_426) and (in_r_RVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond_flatten_fu_341_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1)))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (((ap_const_lv1_0 = exitcond_flatten_reg_426) and (in_r_RVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1))) or (not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (((ap_const_lv1_0 = exitcond_flatten_reg_426) and (in_r_RVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and not((ap_const_lv1_0 = exitcond_flatten_fu_341_p2)) and not((ap_const_logic_1 = ap_enable_reg_pp0_iter1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                if (not((ap_condition_906 = ap_const_boolean_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;

    active_frame_V_0_ack_out_assign_proc : process(ap_CS_fsm_state13, ap_condition_906)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state13) and not((ap_condition_906 = ap_const_boolean_1)))) then 
            active_frame_V_0_ack_out <= ap_const_logic_1;
        else 
            active_frame_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(9 downto 9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state13 <= ap_CS_fsm(10 downto 10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state9 <= ap_CS_fsm(8 downto 8);

    ap_condition_906_assign_proc : process(outs_V_data_V_1_ack_in, outs_V_keep_V_1_ack_in, outs_V_strb_V_1_ack_in, outs_V_user_V_1_ack_in, outs_V_last_V_1_ack_in, outs_V_id_V_1_ack_in, outs_V_dest_V_1_ack_in)
    begin
                ap_condition_906 <= ((outs_V_data_V_1_ack_in = ap_const_logic_0) or (outs_V_keep_V_1_ack_in = ap_const_logic_0) or (outs_V_strb_V_1_ack_in = ap_const_logic_0) or (outs_V_user_V_1_ack_in = ap_const_logic_0) or (outs_V_last_V_1_ack_in = ap_const_logic_0) or (outs_V_id_V_1_ack_in = ap_const_logic_0) or (outs_V_dest_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state13, ap_condition_906)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state13) and not((ap_condition_906 = ap_const_boolean_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13, ap_condition_906)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state13) and not((ap_condition_906 = ap_const_boolean_1)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_ioackin_in_r_ARREADY_assign_proc : process(in_r_ARREADY, ap_reg_ioackin_in_r_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_in_r_ARREADY)) then 
            ap_sig_ioackin_in_r_ARREADY <= in_r_ARREADY;
        else 
            ap_sig_ioackin_in_r_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    exitcond4_fu_353_p2 <= "1" when (x_reg_202 = ap_const_lv10_320) else "0";
    exitcond_flatten_fu_341_p2 <= "1" when (indvar_flatten_reg_180 = ap_const_lv19_75300) else "0";

    in_r_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_reg_ioackin_in_r_ARREADY)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (ap_const_logic_0 = ap_reg_ioackin_in_r_ARREADY))) then 
            in_r_ARVALID <= ap_const_logic_1;
        else 
            in_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    in_r_RREADY_assign_proc : process(outs_V_data_V_1_ack_in, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_426, ap_enable_reg_pp0_iter2, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426, in_r_RVALID)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond_flatten_reg_426) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (((ap_const_lv1_0 = exitcond_flatten_reg_426) and (in_r_RVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))))) then 
            in_r_RREADY <= ap_const_logic_1;
        else 
            in_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    in_r_blk_n_AR_assign_proc : process(m_axi_in_r_ARREADY, ap_CS_fsm_state3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            in_r_blk_n_AR <= m_axi_in_r_ARREADY;
        else 
            in_r_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    in_r_blk_n_R_assign_proc : process(m_axi_in_r_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_426)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond_flatten_reg_426))) then 
            in_r_blk_n_R <= m_axi_in_r_RVALID;
        else 
            in_r_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    indvar_flatten_next_fu_347_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_180) + unsigned(ap_const_lv19_1));
    or_cond_fu_271_p2 <= (tmp_s_fu_265_p2 or tmp_9_fu_259_p2);
    outs_TDATA <= outs_V_data_V_1_data_out;

    outs_TDATA_blk_n_assign_proc : process(outs_V_data_V_1_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_426, ap_enable_reg_pp0_iter2, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond_flatten_reg_426)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426)))) then 
            outs_TDATA_blk_n <= outs_V_data_V_1_state(1);
        else 
            outs_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outs_TDEST <= outs_V_dest_V_1_data_out;
    outs_TID <= outs_V_id_V_1_data_out;
    outs_TKEEP <= outs_V_keep_V_1_data_out;
    outs_TLAST <= outs_V_last_V_1_data_out;
    outs_TSTRB <= outs_V_strb_V_1_data_out;
    outs_TUSER <= outs_V_user_V_1_data_out;
    outs_TVALID <= outs_V_dest_V_1_state(0);
    outs_V_data_V_1_ack_in <= outs_V_data_V_1_state(1);
    outs_V_data_V_1_ack_out <= outs_TREADY;

    outs_V_data_V_1_data_out_assign_proc : process(outs_V_data_V_1_payload_A, outs_V_data_V_1_payload_B, outs_V_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = outs_V_data_V_1_sel)) then 
            outs_V_data_V_1_data_out <= outs_V_data_V_1_payload_B;
        else 
            outs_V_data_V_1_data_out <= outs_V_data_V_1_payload_A;
        end if; 
    end process;

    outs_V_data_V_1_load_A <= (outs_V_data_V_1_state_cmp_full and not(outs_V_data_V_1_sel_wr));
    outs_V_data_V_1_load_B <= (outs_V_data_V_1_sel_wr and outs_V_data_V_1_state_cmp_full);
    outs_V_data_V_1_sel <= outs_V_data_V_1_sel_rd;
    outs_V_data_V_1_state_cmp_full <= '0' when (outs_V_data_V_1_state = ap_const_lv2_1) else '1';

    outs_V_data_V_1_vld_in_assign_proc : process(outs_V_data_V_1_ack_in, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_426, ap_enable_reg_pp0_iter2, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426, in_r_RVALID)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond_flatten_reg_426) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (((ap_const_lv1_0 = exitcond_flatten_reg_426) and (in_r_RVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))))) then 
            outs_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            outs_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outs_V_data_V_1_vld_out <= outs_V_data_V_1_state(0);
    outs_V_dest_V_1_ack_in <= outs_V_dest_V_1_state(1);
    outs_V_dest_V_1_ack_out <= outs_TREADY;
    outs_V_dest_V_1_data_out <= ap_const_lv1_0;
    outs_V_dest_V_1_sel <= outs_V_dest_V_1_sel_rd;

    outs_V_dest_V_1_vld_in_assign_proc : process(outs_V_data_V_1_ack_in, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_426, ap_enable_reg_pp0_iter2, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426, in_r_RVALID)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond_flatten_reg_426) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (((ap_const_lv1_0 = exitcond_flatten_reg_426) and (in_r_RVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))))) then 
            outs_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            outs_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outs_V_dest_V_1_vld_out <= outs_V_dest_V_1_state(0);
    outs_V_id_V_1_ack_in <= outs_V_id_V_1_state(1);
    outs_V_id_V_1_ack_out <= outs_TREADY;
    outs_V_id_V_1_data_out <= ap_const_lv1_0;
    outs_V_id_V_1_sel <= outs_V_id_V_1_sel_rd;

    outs_V_id_V_1_vld_in_assign_proc : process(outs_V_data_V_1_ack_in, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_426, ap_enable_reg_pp0_iter2, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426, in_r_RVALID)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond_flatten_reg_426) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (((ap_const_lv1_0 = exitcond_flatten_reg_426) and (in_r_RVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))))) then 
            outs_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            outs_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outs_V_id_V_1_vld_out <= outs_V_id_V_1_state(0);
    outs_V_keep_V_1_ack_in <= outs_V_keep_V_1_state(1);
    outs_V_keep_V_1_ack_out <= outs_TREADY;
    outs_V_keep_V_1_data_out <= ap_const_lv4_0;
    outs_V_keep_V_1_sel <= outs_V_keep_V_1_sel_rd;

    outs_V_keep_V_1_vld_in_assign_proc : process(outs_V_data_V_1_ack_in, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_426, ap_enable_reg_pp0_iter2, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426, in_r_RVALID)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond_flatten_reg_426) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (((ap_const_lv1_0 = exitcond_flatten_reg_426) and (in_r_RVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))))) then 
            outs_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            outs_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outs_V_keep_V_1_vld_out <= outs_V_keep_V_1_state(0);
    outs_V_last_V_1_ack_in <= outs_V_last_V_1_state(1);
    outs_V_last_V_1_ack_out <= outs_TREADY;

    outs_V_last_V_1_data_out_assign_proc : process(outs_V_last_V_1_payload_A, outs_V_last_V_1_payload_B, outs_V_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = outs_V_last_V_1_sel)) then 
            outs_V_last_V_1_data_out <= outs_V_last_V_1_payload_B;
        else 
            outs_V_last_V_1_data_out <= outs_V_last_V_1_payload_A;
        end if; 
    end process;

    outs_V_last_V_1_load_A <= (outs_V_last_V_1_state_cmp_full and not(outs_V_last_V_1_sel_wr));
    outs_V_last_V_1_load_B <= (outs_V_last_V_1_sel_wr and outs_V_last_V_1_state_cmp_full);
    outs_V_last_V_1_sel <= outs_V_last_V_1_sel_rd;
    outs_V_last_V_1_state_cmp_full <= '0' when (outs_V_last_V_1_state = ap_const_lv2_1) else '1';

    outs_V_last_V_1_vld_in_assign_proc : process(outs_V_data_V_1_ack_in, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_426, ap_enable_reg_pp0_iter2, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426, in_r_RVALID)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond_flatten_reg_426) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (((ap_const_lv1_0 = exitcond_flatten_reg_426) and (in_r_RVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))))) then 
            outs_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            outs_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outs_V_last_V_1_vld_out <= outs_V_last_V_1_state(0);
    outs_V_strb_V_1_ack_in <= outs_V_strb_V_1_state(1);
    outs_V_strb_V_1_ack_out <= outs_TREADY;
    outs_V_strb_V_1_data_out <= ap_const_lv4_0;
    outs_V_strb_V_1_sel <= outs_V_strb_V_1_sel_rd;

    outs_V_strb_V_1_vld_in_assign_proc : process(outs_V_data_V_1_ack_in, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_426, ap_enable_reg_pp0_iter2, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426, in_r_RVALID)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond_flatten_reg_426) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (((ap_const_lv1_0 = exitcond_flatten_reg_426) and (in_r_RVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))))) then 
            outs_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            outs_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outs_V_strb_V_1_vld_out <= outs_V_strb_V_1_state(0);
    outs_V_user_V_1_ack_in <= outs_V_user_V_1_state(1);
    outs_V_user_V_1_ack_out <= outs_TREADY;

    outs_V_user_V_1_data_out_assign_proc : process(outs_V_user_V_1_payload_A, outs_V_user_V_1_payload_B, outs_V_user_V_1_sel)
    begin
        if ((ap_const_logic_1 = outs_V_user_V_1_sel)) then 
            outs_V_user_V_1_data_out <= outs_V_user_V_1_payload_B;
        else 
            outs_V_user_V_1_data_out <= outs_V_user_V_1_payload_A;
        end if; 
    end process;

    outs_V_user_V_1_load_A <= (outs_V_user_V_1_state_cmp_full and not(outs_V_user_V_1_sel_wr));
    outs_V_user_V_1_load_B <= (outs_V_user_V_1_sel_wr and outs_V_user_V_1_state_cmp_full);
    outs_V_user_V_1_sel <= outs_V_user_V_1_sel_rd;
    outs_V_user_V_1_state_cmp_full <= '0' when (outs_V_user_V_1_state = ap_const_lv2_1) else '1';

    outs_V_user_V_1_vld_in_assign_proc : process(outs_V_data_V_1_ack_in, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_426, ap_enable_reg_pp0_iter2, ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426, in_r_RVALID)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond_flatten_reg_426) and not((((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (((ap_const_lv1_0 = exitcond_flatten_reg_426) and (in_r_RVALID = ap_const_logic_0)) or ((ap_const_lv1_0 = exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_426) and (ap_const_logic_0 = outs_V_data_V_1_ack_in)))))) then 
            outs_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            outs_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outs_V_user_V_1_vld_out <= outs_V_user_V_1_state(0);
    p_s_fu_229_p3 <= 
        ap_const_lv32_0 when (tmp_1_reg_410(0) = '1') else 
        tmp_reg_405;
    p_v_fu_323_p3 <= 
        tmp_6_fu_297_p3 when (or_cond_fu_271_p2(0) = '1') else 
        tmp_12_fu_315_p3;
    pix_last_V_fu_393_p2 <= "1" when (x_mid2_fu_359_p3 = ap_const_lv10_31F) else "0";
    pix_user_V_fu_387_p2 <= "1" when (tmp_7_fu_381_p2 = ap_const_lv10_0) else "0";
    storemerge_fu_239_p3 <= 
        p_s_fu_229_p3 when (mode_V(0) = '1') else 
        tmp_2_fu_235_p1;
    tmp_10_fu_331_p1 <= std_logic_vector(resize(unsigned(p_v_reg_415),32));
    tmp_12_fu_315_p3 <= 
        tmp_8_fu_305_p4 when (tmp_4_fu_253_p2(0) = '1') else 
        tmp_5_fu_287_p4;
    tmp_1_fu_223_p2 <= "1" when (signed(tmp_fu_217_p2) > signed(ap_const_lv32_2)) else "0";
    tmp_2_fu_235_p1 <= std_logic_vector(resize(unsigned(active_frame_V_0_data_reg),32));
    tmp_3_cast8_mid2_v_v_1_fu_373_p3 <= 
        y_s_fu_367_p2 when (exitcond4_fu_353_p2(0) = '1') else 
        y_phi_fu_195_p4;
    tmp_3_fu_277_p4 <= frame_buffer1(31 downto 2);
    tmp_4_fu_253_p2 <= "1" when (storemerge_fu_239_p3 = ap_const_lv32_0) else "0";
    tmp_5_fu_287_p4 <= frame_buffer0(31 downto 2);
    tmp_6_fu_297_p3 <= 
        tmp_3_fu_277_p4 when (tmp_s_fu_265_p2(0) = '1') else 
        tmp_5_fu_287_p4;
    tmp_7_fu_381_p2 <= (x_mid2_fu_359_p3 or tmp_3_cast8_mid2_v_v_1_fu_373_p3);
    tmp_8_fu_305_p4 <= frame_buffer2(31 downto 2);
    tmp_9_fu_259_p2 <= "1" when (storemerge_fu_239_p3 = ap_const_lv32_1) else "0";
    tmp_fu_217_p2 <= std_logic_vector(unsigned(n) + unsigned(ap_const_lv32_1));
    tmp_s_fu_265_p2 <= "1" when (storemerge_fu_239_p3 = ap_const_lv32_2) else "0";
    x_1_fu_399_p2 <= std_logic_vector(unsigned(x_mid2_fu_359_p3) + unsigned(ap_const_lv10_1));
    x_mid2_fu_359_p3 <= 
        ap_const_lv10_0 when (exitcond4_fu_353_p2(0) = '1') else 
        x_reg_202;

    y_phi_fu_195_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_426, y_reg_191, tmp_3_cast8_mid2_v_v_1_reg_435)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_0 = exitcond_flatten_reg_426))) then 
            y_phi_fu_195_p4 <= tmp_3_cast8_mid2_v_v_1_reg_435;
        else 
            y_phi_fu_195_p4 <= y_reg_191;
        end if; 
    end process;

    y_s_fu_367_p2 <= std_logic_vector(unsigned(y_phi_fu_195_p4) + unsigned(ap_const_lv10_1));
end behav;
